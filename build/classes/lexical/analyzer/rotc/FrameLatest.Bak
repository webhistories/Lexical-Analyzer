/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexical.analyzer.rotc;


import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import javax.swing.text.AttributeSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.StyleConstants;

/**
 *
 * @author PC
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }
    
    public void close(){
     WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
     Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        Clear = new javax.swing.JLabel();
        Lexical = new javax.swing.JLabel();
        Exit = new javax.swing.JLabel();
        Clear1 = new javax.swing.JLabel();
        Syntax = new javax.swing.JLabel();
        Exit1 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        LexicalTbl = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        SyntaxTbl = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        ErrorTxt = new javax.swing.JEditorPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        ErrorTxt1 = new javax.swing.JEditorPane();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        ErrorTxt2 = new javax.swing.JEditorPane();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        ErrorTxt3 = new javax.swing.JEditorPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTabbedPane8 = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jsp = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        SourceTxt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ROTCompiler ver12.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        Clear.setForeground(new java.awt.Color(0, 255, 0));
        Clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClearMouseClicked(evt);
            }
        });
        getContentPane().add(Clear);
        Clear.setBounds(400, 0, 140, 50);

        Lexical.setForeground(new java.awt.Color(0, 255, 0));
        Lexical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LexicalMouseClicked(evt);
            }
        });
        getContentPane().add(Lexical);
        Lexical.setBounds(540, 0, 90, 60);

        Exit.setForeground(new java.awt.Color(0, 255, 0));
        Exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitMouseClicked(evt);
            }
        });
        getContentPane().add(Exit);
        Exit.setBounds(740, 0, 140, 50);

        Clear1.setForeground(new java.awt.Color(0, 255, 0));
        Clear1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Clear1MouseClicked(evt);
            }
        });
        getContentPane().add(Clear1);
        Clear1.setBounds(400, 0, 140, 50);

        Syntax.setForeground(new java.awt.Color(0, 255, 0));
        Syntax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SyntaxMouseClicked(evt);
            }
        });
        getContentPane().add(Syntax);
        Syntax.setBounds(630, 0, 100, 60);

        Exit1.setForeground(new java.awt.Color(0, 255, 0));
        Exit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Exit1MouseClicked(evt);
            }
        });
        getContentPane().add(Exit1);
        Exit1.setBounds(740, 0, 140, 50);

        LexicalTbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LexicalTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Lexeme", "Token"
            }
        ));
        jScrollPane3.setViewportView(LexicalTbl);

        jTabbedPane2.addTab("Lexical Table", jScrollPane3);

        SyntaxTbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SyntaxTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Production", ""
            }
        ));
        jScrollPane9.setViewportView(SyntaxTbl);

        jTabbedPane2.addTab("Syntax Table", jScrollPane9);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(960, 80, 300, 570);

        ErrorTxt.setContentType("text/html");
        jScrollPane2.setViewportView(ErrorTxt);

        jTabbedPane3.addTab("Error", jScrollPane2);

        getContentPane().add(jTabbedPane3);
        jTabbedPane3.setBounds(30, 510, 910, 140);

        ErrorTxt1.setContentType("text/html");
        jScrollPane4.setViewportView(ErrorTxt1);

        jTabbedPane4.addTab("Error", jScrollPane4);

        getContentPane().add(jTabbedPane4);
        jTabbedPane4.setBounds(30, 510, 440, 140);

        ErrorTxt2.setContentType("text/html");
        jScrollPane5.setViewportView(ErrorTxt2);

        jTabbedPane6.addTab("Error", jScrollPane5);

        getContentPane().add(jTabbedPane6);
        jTabbedPane6.setBounds(30, 510, 440, 140);

        ErrorTxt3.setContentType("text/html");
        jScrollPane6.setViewportView(ErrorTxt3);

        jTabbedPane7.addTab("Error", jScrollPane6);

        getContentPane().add(jTabbedPane7);
        jTabbedPane7.setBounds(30, 510, 440, 140);
        getContentPane().add(jScrollPane7);
        jScrollPane7.setBounds(480, 530, 2, 2);
        getContentPane().add(jTabbedPane8);
        jTabbedPane8.setBounds(480, 530, 460, 120);

        jTabbedPane1.setBackground(new java.awt.Color(204, 153, 0));

        SourceTxt.setColumns(20);
        SourceTxt.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        SourceTxt.setRows(5);
        jScrollPane1.setViewportView(SourceTxt);

        jsp.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Source", jPanel1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(30, 80, 910, 410);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lexical/analyzer/rotc/pubg ui.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-10, 0, 1280, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        // Lines.append("1\n");
    }//GEN-LAST:event_formWindowActivated

    private void ClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearMouseClicked
        close();
        Frame frame = new Frame();
        frame.setExtendedState(Home.MAXIMIZED_BOTH);
        frame.setVisible(true);
    }//GEN-LAST:event_ClearMouseClicked

    private void LexicalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LexicalMouseClicked
        ErrorTxt.setText(null);

        //populate LexicalTbl
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) LexicalTbl.getModel();
        model.setRowCount(0);

        ArrayList<Lexical> list = null;
        try {
            list = ListLexical();
        } catch (BadLocationException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object rowData[] = new Object[(list.size())+1];
        //    System.out.print(list.size());
        for(int i = 0; i <list.size(); i++)
        {
            rowData[0] = list.get(i).Lexeme;
            rowData[1] = list.get(i).Token;

            model.addRow(rowData);
        }
        System.out.println(list.size()+"\n");
     if(ErrorTxt.getDocument().getLength()==0){
            JOptionPane.showMessageDialog(null, "No Lexical Error found!");
        }
        else{
            JOptionPane.showMessageDialog(null, "Lexical  Error found!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_LexicalMouseClicked

    private void ExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitMouseClicked
        Home home = new Home();
        home.setExtendedState(Home.MAXIMIZED_BOTH);
        home.setVisible(true);
        close();
    }//GEN-LAST:event_ExitMouseClicked

    private void Clear1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Clear1MouseClicked
        close();
        Frame frame = new Frame();
        frame.setExtendedState(Home.MAXIMIZED_BOTH);
        frame.setVisible(true);
    }//GEN-LAST:event_Clear1MouseClicked

    private void Exit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Exit1MouseClicked
        Home home = new Home();
        home.setExtendedState(Home.MAXIMIZED_BOTH);
        home.setVisible(true);
        close();
    }//GEN-LAST:event_Exit1MouseClicked

    private void SyntaxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SyntaxMouseClicked
        ErrorTxt.setText(null);

        //populate LexicalTbl
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) SyntaxTbl.getModel();
        model.setRowCount(0);

        ArrayList<Syntax> listSyntax = null;
        try {
            listSyntax = SynAnalyze();
        } catch (BadLocationException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object rowData[] = new Object[(listSyntax.size())+1];
        //    System.out.print(list.size());
        for(int i = 0; i <listSyntax.size(); i++)
        {
            rowData[0] = listSyntax.get(i).Production;
            rowData[1] = listSyntax.get(i).Syntax;

            model.addRow(rowData);
        }
        System.out.println(listSyntax.size()+"\n");

        if(ErrorTxt.getDocument().getLength()==0){
            JOptionPane.showMessageDialog(null, "No Syntax Error found!");
        }
        else{
            JOptionPane.showMessageDialog(null, "Syntax Error found!","Error",JOptionPane.ERROR_MESSAGE);
        }
        //SynAnalyze();
    }//GEN-LAST:event_SyntaxMouseClicked
    
    public class Lexical{
       public String Lexeme;
       public String Token;
       public String Line;
        public Lexical(String Lexeme, String Token, String Line)
        {
            this.Lexeme = Lexeme;
            this.Token = Token;
            this.Line= Line;
        
        }
    }
    
 // creates a class and use it to populate the arraylist
    public ArrayList ListLexical() throws BadLocationException
    {
    //    SourceTxt.setText("1:\t");
        char[] chars = SourceTxt.getText().toCharArray();
        //char[] line = SourceTxt.getText().toCharArray();
        
        String id="";
       String fontfamily = ErrorTxt.getFont().getFamily();//font for error list
       int i = 0, flag = 0, IdentifierCount=0, lineNumber=1, LexError=0;
      ArrayList<Lexical> list = new ArrayList<Lexical>();
//     /list.add(new Lexical("", "", ""));
          Document doc = ErrorTxt.getDocument();
       
       
     while(flag==0){
     
      IdentifierCount=0;
      
      if(chars[i]=='a'){
          flag = 1;
           while(flag==1){
               flag=1;
               id = String.valueOf(chars[i]);
                 i++;
                 if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                   //  ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                     //        + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. No delimiter found.");
                    list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
                    }//if
                if(chars[i]=='s'){
                 id = id.concat(String.valueOf(chars[i]));
                 i++;
                  if(chars.length==i){//if no delimiter found

                        doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                       list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
                    }//if
                }
 //=========================================================ATTENTION=========/
                else if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
 list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }
   if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
 list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
    list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
   list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
   list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
  list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
    list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
    list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
                 
  }}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============ATTENTION DELIMITER==========
                if(chars[i]==':'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("attention","attention", String.valueOf(lineNumber)));
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                         flag=8;
                       // System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("attention","attention", String.valueOf(lineNumber)));
                    
                    if(chars[i]=='\n'||chars[i]==' '){
                        id="";
                          
                     id = id.concat(String.valueOf(chars[i-1]));
                     list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;
                    }
                    else{
                      //  id=":";
                        //ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                        //     + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' or '[NEWLINE]' is expected.");
                       doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. '[SPACE]' or '[NEWLINE]' is expected.\n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     break;
                    }
                    }
                 }
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
           //  ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
             //   ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
               //              + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. ':' is expected.");
               doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ':' is expected." , null);
              list.add(new Lexical(id,"attention", String.valueOf(lineNumber)));
                     i++;
                     
                     if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                         
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    //break; //proceed to identifier
                }
                }//if
 //===========================================================================
                else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                if(chars[i]=='s'){
                id = id.concat(String.valueOf(chars[i]));
                i++;
                if(chars.length==i){//if no delimiter found
               doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                      list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }//if
                }
                else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                 if(chars[i]=='e'){
                  id = id.concat(String.valueOf(chars[i]));
                 i++;
                 if(chars.length==i){//if no delimiter found
                   doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }//if
                 }
                  else{
                     IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                  if(chars[i]=='m'){
                    id = id.concat(String.valueOf(chars[i]));
                  i++;
                  if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                     list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }//if
                  }
                   else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                 if(chars[i]=='b'){
                 id = id.concat(String.valueOf(chars[i]));
                  i++;
                  if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                     list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }//if
                 }
                  else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                  if(chars[i]=='l'){
                 id = id.concat(String.valueOf(chars[i]));
                   i++;
                   if(chars.length==i){//if no delimiter found
                    doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }//if
                  }
                  else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                   if(chars[i]=='e'){
                 id = id.concat(String.valueOf(chars[i]));
                 i++;
                 
                    if(chars.length==i){//if no delimiter found
                    doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                     list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                    }
                   
                   }
                    else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                 if(chars[i]==' '){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("assemble","assemble", String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    //break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("assemble","assemble", String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
            doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". No delimiter found. [SPACE] is expected.\n" , null);
               list.add(new Lexical("assemble","assemble", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                     
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                 
      }//while flag=1
         //  System.out.print("id is: "+id+" ");
      }//if chars [i]
      //=====================================================BOOL=========
      else if(chars[i]=='b'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   }
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============BOOL DELIMITER==========
                if(chars[i]==' '){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("bool","bool", String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("bool","bool", String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
               else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". No delimiter found. [SPACE] is expected.\n" , null);
               list.add(new Lexical("bool","bool", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================BOOL=======
         //=====================================================CHR=========
      else if(chars[i]=='c'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='h'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
                             }
   if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  //============CHR DELIMITER==========
                if(chars[i]==' '){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
              else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". No delimiter found. [SPACE] is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                
                }//if ch==r
 //=========================================================CHECKPONT=========/
                else if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
  }
   if(chars[i]=='c'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='k'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break; /**proceed to identifier**/}
  if(chars[i]=='p'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============CHECKPOINT DELIMITER==========
                if(chars[i]==';'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("checkpoint","checkpoint", String.valueOf(lineNumber)));
                       id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                         flag=8;
                        
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("checkpoint","checkpoint",String.valueOf(lineNumber)));
                    id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
           //  ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
             //   ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
               //              + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. ':' is expected.");
               doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ';' is expected." , null);
              list.add(new Lexical(id,"checkpoint", String.valueOf(lineNumber)));
                     i++;
                     
                     if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                         
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//else if ch==e
                
 //========================================================CHECKPOINT===================
                else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                }//if ch==h
 //=========================================================COMMAND=========/
                else if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='m'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='m'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='a'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='d'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============COMMAND DELIMITER==========
                if(chars[i]=='('){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("command","command",String.valueOf(lineNumber)));
                         id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("command","command",String.valueOf(lineNumber)));
                    id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
             else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
           //  ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
             //   ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
               //              + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. ':' is expected.");
               doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. '(' is expected." , null);
              list.add(new Lexical(id,"command", String.valueOf(lineNumber)));
                     i++;
                     
                     if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                         
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==m
    
   //=====================================================CONST==============
   else if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}

  //============CONST DELIMITER==========
                if(chars[i]==' '){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("const","const",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("const","const",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
           /* else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. [SPACE] is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==n
   //================================================CONST==================
      //=====================================================COVER==============
   else if(chars[i]=='v'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}
  if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}

  //============COVER DELIMITER==========
                if(chars[i]==';'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("cover","cover",String.valueOf(lineNumber)));
                         id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                         flag=8;
                break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("cover","cover",String.valueOf(lineNumber)));
                    id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
          else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". No delimiter found. ';' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==v
   //=============================================COVER=======================
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                }//else if ch==o
                
 //========================================================COMMAND===================       
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
             
      }//while
      }//else if
    //=============================================================CHR=======
          //=====================================================DISMISS=========
      else if(chars[i]=='d'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='m'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){list.add(new Lexical("dismiss","dismiss",String.valueOf(lineNumber))); flag=8;break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   
  //============DISMISS DELIMITER==========
                if(chars[i]==' '||chars[i]=='\n'||chars[i]=='\t'
              ||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("dismiss","dismiss",String.valueOf(lineNumber)));
                        
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("dismiss","dismiss",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
         
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '\n', '\t' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
            
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if char==d(i)smiss
   //=====================================================DO==============
   else if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  //============DO DELIMITER==========
                if(chars[i]==' '){
                i++;
                    if(i==(chars.length) ||chars[i]==' '){
                        list.add(new Lexical("do","do",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("do","do",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. [SPACE] is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==o
   //=============================================DO=======================
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================DISMISS=======
          //=====================================================ELSE=========
      else if(chars[i]=='e'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}//if
                             else if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}
   if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}
  
  //============ELSE DELIMITER==========
                if(chars[i]==' '||chars[i]=='\n'||chars[i]=='\t'
              ||chars[i]=='\r'||chars[i]=='{'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("else","else",String.valueOf(lineNumber)));
                        if(chars[i-1]=='{'){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("else","else",String.valueOf(lineNumber)));
                    if(chars[i-1]=='{'){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
            
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' ' ', '\n', '\t', '\r' or '{' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
             //=====================================================elseif==============
   if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='f'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  
  //============ELSEIF DELIMITER==========
                if(chars[i]==' '||chars[i]=='('||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("elseif","elseif",String.valueOf(lineNumber)));
                          if(chars[i-1]=='{'){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("elseif","elseif",String.valueOf(lineNumber)));
                      if(chars[i-1]=='{'){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '(' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '(' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==ELSEIF
   //=============================================ELSEIF======================= else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                }//if char==else
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if char==else
  
               
   //=====================================================ENDMISSION==============
   else if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='d'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   if(chars[i]=='m'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
     if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
       if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
        if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
         if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  
  //============ENDMISSION DELIMITER==========
                if(chars[i]==' '||chars[i]=='\n'||chars[i]=='\t'
              ||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("endmission","endmission",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("endmission","endmission",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
            
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '\n','\t' or '\r'  is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
            
                }// if ch==ENDMISSION
   //=============================================ENDMISSION======================= 
   //=====================================================EXECUTE==============
   else if(chars[i]=='x'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   if(chars[i]=='c'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='u'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
     if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   
  //============EXECUTE DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("execute","execute",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("execute","execute",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==EXECUTE
   //=============================================EXECUTE=======================   
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if char==else
    //=============================================================ELSE=======
            //=====================================================FALLIN=========
      else if(chars[i]=='f'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='a'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============FALLIN DELIMITER==========
                 if(chars[i]==' '||chars[i]=='\n'||chars[i]=='\t'
              ||chars[i]=='\r'||chars[i]=='{'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("fallin","fallin",String.valueOf(lineNumber)));
                        if(chars[i-1]=='{'){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                       
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("fallin","fallin",String.valueOf(lineNumber)));
                    if(chars[i-1]=='{'){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    }
                    flag=0;
                    id="";
                    break;}
                 }
           /* else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '{' is expected.");
                
             break;
                 }*/
              
                      else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '\n', '\t', '\r' or '{' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if char==fall
         //=====================================================FALSE==============
   else if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============FALSE DELIMITER==========
                if(chars[i]==' '||chars[i]==';'||chars[i]==')'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("false","false",String.valueOf(lineNumber)));
                        if(chars[i-1]==';'||chars[i-1]==')'){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                     
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("false","false",String.valueOf(lineNumber)));
                      if(chars[i-1]==';'||chars[i-1]==')'){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
                
            else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', ';' or ')' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }    
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==FAL(S)E
   //=============================================FALSE=======================
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                }//if
   //=====================================================FLT==============
   else if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============FLT DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("flt","flt",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("flt","flt",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected."); 
                
             break;
                 }*/
                
                     else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==flt
   //=============================================FLT=======================
   //=====================================================FOR LOOP==============
   else if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}
   if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============FOR DELIMITER==========
                    if(chars[i]==' '||chars[i]=='('||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("for","for",String.valueOf(lineNumber)));
                        if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("for","for",String.valueOf(lineNumber)));
                       if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>. '"+chars[i]+"' is not a valid delimiter. '(' is expected.");
                
             break;
                 }*/
                    
                 else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '(' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                    
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==for
   //=============================================FOR=======================
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                
      }//while
      }//else if
    //=============================================================FALLIN=======
           //=====================================================IF=========
      else if(chars[i]=='i'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='f'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  //============IF DELIMITER==========
                if(chars[i]==' '||chars[i]=='('||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("if","if",String.valueOf(lineNumber)));
                        if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("if","if",String.valueOf(lineNumber)));
                    if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '(' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. '(' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if 
     //=====================================================INT==============
   else if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
  //============INT DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("int","int",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("int","int",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 } */
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. [SPACE] is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==o
   //=============================================INT=======================
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if char==if
    //=============================================================IF=======
            //=====================================================NULL=========
      else if(chars[i]=='n'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='u'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============NULL DELIMITER==========
                if(chars[i]==' '||chars[i]==';'||chars[i]=='('){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("null","null",String.valueOf(lineNumber)));
                        if(chars[i-1]==';'||chars[i-1]==')'){id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("null","null",String.valueOf(lineNumber)));
                          if(chars[i-1]==';'||chars[i-1]==')'){id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));}
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '(' or ';' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================NULL=======
      
            //=====================================================ONDUTY=========
      else if(chars[i]=='o'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}//if
                             else if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
}
   if(chars[i]=='d'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='u'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='y'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============ONDUTY DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("onduty","onduty",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("onduty","onduty",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================ONDUTY=======
         //=====================================================REPORT=========
      else if(chars[i]=='r'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                     ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. No delimiter found.");
                        break;}//if
                             else if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='p'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
   if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============REPORT DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("report","report",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("report","report",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================REPORT=======
   //=====================================================STARTMISSION=========
      else if(chars[i]=='s'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                        else if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='a'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='t'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      if(chars[i]=='m'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
        if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
          if(chars[i]=='s'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
            if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
              if(chars[i]=='o'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                
  //============STARTMISSION DELIMITER==========
                if(chars[i]==':'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("startmission","startmission",String.valueOf(lineNumber)));
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                         flag=8;
                    break;
                    }
                           else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("startmission","startmission", String.valueOf(lineNumber)));
                    if(chars[i]=='\n'||chars[i]==' '){
                        id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                    else{
                        id=":";
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' or '[NEWLINE]' is expected.");
                    break;}
                    }
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. ':' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ':' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
   }//IF CHAR== ST(A)RTMISSION
   //=====================================================STR==============
   else if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
  //============STR DELIMITER==========
                if(chars[i]==' '||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("str","str",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("str","str",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }// if ch==ST(R)
   //=============================================STR=======================
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                }//if char==s(t)artmission
      //=====================================================SURRENDER==============
   else if(chars[i]=='u'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
      if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
          if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
              if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                  if(chars[i]=='n'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                  
                      if(chars[i]=='d'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                          if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
                              if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============SURRENDER DELIMITER==========
                if(chars[i]==' '){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("surrender","surrender",String.valueOf(lineNumber)));
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("surrender","surrender",String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '[SPACE]' is expected.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//else if ch==s(u)rrender
   //=============================================surrender=======================
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================STARTMISSION=======
          //=====================================================TRUE=========
      else if(chars[i]=='t'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                     ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. No delimiter found.");
                        break;}//if
                             else if(chars[i]=='r'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='u'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============TRUE DELIMITER==========
                if(chars[i]==' '||chars[i]==';'||chars[i]==')'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("true","true",String.valueOf(lineNumber)));
                        if(chars[i-1]==';'||chars[i-1]==')'){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                        System.out.print(flag);
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("true","true",String.valueOf(lineNumber)));
                     if(chars[i-1]==';'||chars[i-1]==')'){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
                
             break;
                 }*/
                
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', ';' or ')' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if
    //=============================================================TRUE=======  
            //=====================================================BOOL=========
      else if(chars[i]=='w'){
                flag = 1;
           while(flag==1){
               flag=1;id = String.valueOf(chars[i]);i++;
             if(chars.length==i){//if no delimiter found
                      doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}//if
                             else if(chars[i]=='h'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}
   if(chars[i]=='i'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
    else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  if(chars[i]=='l'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
    if(chars[i]=='e'){id = id.concat(String.valueOf(chars[i]));i++;
  /**if no delim**/ if(chars.length==i){ doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;}}
   else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
  //============WHILE DELIMITER==========
                     if(chars[i]==' '||chars[i]=='('||chars[i]=='\r'){
                i++;
                    if(i==(chars.length)){
                        list.add(new Lexical("while","while",String.valueOf(lineNumber)));
                           if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                         flag=8;
                    break;
                    }
                    else{//IF THERE ARE MORE CHARACTERS AFTER RESERVED WORD
                    list.add(new Lexical("while","while",String.valueOf(lineNumber)));
                      if(chars[i-1]=='('){
                            id="";
                        id = id.concat(String.valueOf(chars[i-1]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        }
                    flag=0;
                    id="";
                    break;}
                 }
            /*else if(chars[i]!='a'&&chars[i]!='b'&&chars[i]!='c'&&chars[i]!='d'&&chars[i]!='e'
                &&chars[i]!='f'&&chars[i]!='g'&&chars[i]!='h'&&chars[i]!='i'&&chars[i]!='j'
                &&chars[i]!='k'&&chars[i]!='l'&&chars[i]!='m'&&chars[i]!='n'&&chars[i]!='o'
                &&chars[i]!='p'&&chars[i]!='q'&&chars[i]!='r'&&chars[i]!='s'&&chars[i]!='t'
                &&chars[i]!='u'&&chars[i]!='v'&&chars[i]!='w'&&chars[i]!='x'&&chars[i]!='y'
                &&chars[i]!='z'&&chars[i]!='_'){//ERROR TRAP FOR DELIMITER 
             ErrorTxt.setText("'"+chars[i]+"' is not a valid character");
                ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. '(' is expected.");
                
             break;
                 } */
                     
                else if(chars[i]!='a'||chars[i]!='b'||chars[i]!='c'||chars[i]!='d'||chars[i]!='e'
                ||chars[i]!='f'||chars[i]!='g'||chars[i]!='h'||chars[i]!='i'||chars[i]!='j'
                ||chars[i]!='k'||chars[i]!='l'||chars[i]!='m'||chars[i]!='n'||chars[i]!='o'
                ||chars[i]!='p'||chars[i]!='q'||chars[i]!='r'||chars[i]!='s'||chars[i]!='t'
                ||chars[i]!='u'||chars[i]!='v'||chars[i]!='w'||chars[i]!='x'||chars[i]!='y'
                ||chars[i]!='z'||chars[i]!='_'||chars[i]!='1'||chars[i]!='2'||chars[i]!='3'
                ||chars[i]!='4'||chars[i]!='5'||chars[i]!='6'||chars[i]!='7'||chars[i]!='8'
                ||chars[i]!='9'){//ERROR TRAP FOR DELIMITER OF ASSEMBLE
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on"+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. ' ', '(' or '\r' is expected.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }     
                     
                 else{
                    IdentifierCount++;
                    flag=3;
                    break; //proceed to identifier
                }
                }//if
                 else{IdentifierCount++;flag=3;break; /**proceed to identifier**/}
      }//while
      }//else if char==while
    //=============================================================WHILE=======
      else if(chars[i]=='g'||chars[i]=='h'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'
           ||chars[i]=='p'||chars[i]=='q'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'){
          flag=3;
          IdentifierCount++;
      }
     //===========================================MILLER 
      //=========================================================================Reserved Symbols
      
      else if(chars[i]=='*'&&chars[i+1]=='*'){
          int commentctr=0;
          list.add(new Lexical("**","**",String.valueOf(lineNumber)));
          i+=2;
          while(commentctr==0){
                if(chars[i]=='*'){
                     
                    if(chars[i+1]=='*'){
                        i+=2;
                        break;
                    }
                    else{
                        id = id.concat(String.valueOf(chars[i])); i++;
                        id = id.concat(String.valueOf(chars[i])); i++;
                        
                    }
                }
                
                else{
                    id = id.concat(String.valueOf(chars[i])); i++;
                    
                }
          }
          
          if(i==chars.length){
                list.add(new Lexical(id,"Comments",String.valueOf(lineNumber)));
                list.add(new Lexical("**","**",String.valueOf(lineNumber)));
                flag=8;
                break; }
        else{
            list.add(new Lexical(id,"Comments",String.valueOf(lineNumber)));
            list.add(new Lexical("**","**",String.valueOf(lineNumber)));
            id="";
            flag=0;
            i++;
        }
      }
      
      ///MILLER END COMMENT============================================
      //=====================================================MILLER INT/FLOAT LITERAL      
         
     else if(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||chars[i]=='6'||
     chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0'||(chars[i]=='('&&chars[i+1]=='-')){
         int intctr = 0, deciflag = 0, decictr1 = 0, negactr = 0; 
        if (chars[i]=='('&&chars[i+1]=='-'){
        
            if(i+2==chars.length){
                id = id.concat(String.valueOf(chars[i])); i++;
            id = id.concat(String.valueOf(chars[i]));
           doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
 
            }
            else{
            id = id.concat(String.valueOf(chars[i]));
             list.add(new Lexical(id,id,String.valueOf(lineNumber)));
             id="";
            i++;
            id = id.concat(String.valueOf(chars[i])); i++;
            negactr++;}
        } 
        
        if(chars[i]=='0'&&chars[i+1]=='.'){
             id = id.concat(String.valueOf(chars[i])); i++;
             // System.out.print("Id1:"+id);
             id = id.concat(String.valueOf(chars[i]));
            // System.out.print("Id2:"+id);
        }
         
        else if(chars[i]=='0'&&chars[i+1]!='.'&&chars[i+1]!='1'&&chars[i+1]!='2'&&chars[i+1]!='3'&&chars[i+1]!='4'&&
            chars[i+1]!='5'&&chars[i+1]!='6'&&chars[i+1]!='7'&&chars[i+1]!='8'&&chars[i+1]!='9'&&chars[i+1]!='0'&&negactr==0)
        {
            id = id.concat(String.valueOf(chars[i]));
            i++;
        } 
        
        else{
            int zerowatch;
            zerowatch = i;
       
            while(intctr<=9){
           //    System.out.print("HELLO ["+intctr);
                      if(i+1==chars.length&&(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||chars[i]=='6'||
                chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0')){//BEA EDIT
                          id = id.concat(String.valueOf(chars[i]));
                          doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Int Literal", String.valueOf(lineNumber)));
                        flag=8;
                    break;

                      //     System.out.print("HELLO");
                      
                            
                             }
                else if(chars[i]=='0'&&zerowatch==i){ i++; zerowatch++;}
                else if(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||chars[i]=='6'||
                chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0'){
                    id = id.concat(String.valueOf(chars[i]));
                    i++; intctr++;  
//System.out.print("ID up["+id+"] ");    
                }
         
             
                else if(chars[i]=='.'){
                    if(i+1==chars.length){
                         doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No decimal value found.\n" , null);
                        list.add(new Lexical(id,"Float Literal", String.valueOf(lineNumber)));
                    break;

                    }
                    else{
                    id = id.concat(String.valueOf(chars[i]));
                    deciflag++;
                    break;}
                }
                   else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'||chars[i]=='f'||chars[i]=='g'||
                        chars[i]=='h'||chars[i]=='i'||chars[i]=='j'||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||
                        chars[i]=='o'||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'||chars[i]=='u'||
                        chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'||chars[i]=='z')
{//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". Delimiter is not valid." , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                  
             
                else break;
            } 
             if(intctr>9){
            //ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
             //                + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. Invalid number of whole number digits. Only 9 digits are allowed.");
                            //flag=8; 
     
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". Invalid number of whole number digits. Only 9 digits are allowed.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
        }
       
        if(chars[i]=='.'){
             
             i++;
             while(decictr1<=4){
                 System.out.print("Count:"+id);
                  if(i+1==chars.length&&(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||chars[i]=='6'||
                chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0')){//BEA EDIT
               //           id = id.concat(String.valueOf(chars[i]));
                          doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,"Identifier", String.valueOf(lineNumber)));
                    break;
                             }
               
                  
                 else if(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||chars[i]=='6'||
                chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0'){
                    id = id.concat(String.valueOf(chars[i]));
                    i++; decictr1++;   
                    
                }
             else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'||chars[i]=='f'||chars[i]=='g'||
                        chars[i]=='h'||chars[i]=='i'||chars[i]=='j'||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||
                        chars[i]=='o'||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'||chars[i]=='u'||
                        chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'||chars[i]=='z')
             {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
                 
                else 
                    break;
             }
                if(decictr1>4)    {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical("chr","chr", String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
         }
            
                  
         if(chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'||
         chars[i]=='6'||chars[i]=='7'||chars[i]=='8'||chars[i]=='9'||chars[i]=='0'||
         (negactr!=0&&chars[i]!=')')){
          // flag=9;
         }
         
         else{ if(negactr!=0) {  //i++;
             
         }
      
         if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
         chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
         chars[i]=='('||chars[i]==')'||chars[i]==';'||chars[i]==','||
         chars[i]=='{'||chars[i]==' '||chars[i]=='\n'||chars[i]=='='||
         chars[i]=='['||chars[i]==']'||chars[i]=='&'||chars[i]=='|'){
                  
            if(/**chars[i]=='('||**/chars[i]==')'||chars[i]==';'||chars[i]==','||
            chars[i]=='{'||chars[i]==' '||chars[i]=='\n'||chars[i]==']'){
                       
                if((i+1)==chars.length){
               
                    if(deciflag!=0){
                        list.add(new Lexical(id,"Float Literal",String.valueOf(lineNumber)));
                   
                        id="";
                    id = id.concat(String.valueOf(chars[i])); 
                     list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                     break;
                    }
                    else 
                        {
                         
                         if(negactr==0){list.add(new Lexical(id,"Int Literal",String.valueOf(lineNumber)));}
                        else{
                        list.add(new Lexical(id,"Negative Int Literal",String.valueOf(lineNumber)));}
                        id="";
                    id = id.concat(String.valueOf(chars[i])); 
                     list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                       
                    break;}
                }
                
                else{
                    
                    if(deciflag!=0)
                        list.add(new Lexical(id,"Float Literal",String.valueOf(lineNumber)));
                    else {
                         if(negactr==0){list.add(new Lexical(id,"Int Literal",String.valueOf(lineNumber)));}
                        else{
                        list.add(new Lexical(id,"Negative Int Literal",String.valueOf(lineNumber)));}
                     /**   id="";
                    id = id.concat(String.valueOf(chars[i]));
                    list.add(new Lexical(id,id,String.valueOf(lineNumber)));**/
                    }
                    id="";
                    
                    if(chars[i]!=' '&&chars[i]!='\n'){
                        id = id.concat(String.valueOf(chars[i]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        id=" ";                        
                    }
                    //i=i+2;
                    i++;
                    flag=0;
                }
                
            }
            
            else if(chars[i]=='='||chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
            chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||chars[i]=='&'||chars[i]=='|')
            {
                     
                  if(i+1==chars.length){
                      //deciflag=1;
                      list.add(new Lexical(id,"Float Literal",String.valueOf(lineNumber)));
                      id="";
                id = id.concat(String.valueOf(chars[i]));
                list.add(new Lexical(id,id,String.valueOf(lineNumber)));

                   break;   
                  }
                      if(deciflag!=0)
                    list.add(new Lexical(id,"Float Literal",String.valueOf(lineNumber)));
                else 
                      { if(negactr==0){list.add(new Lexical(id,"Int Literal",String.valueOf(lineNumber)));}
                        else{
                        list.add(new Lexical(id,"Negative Int Literal",String.valueOf(lineNumber)));}}
                id="";
                id = id.concat(String.valueOf(chars[i]));
                i++;
                
                if(chars[i-1]=='+'&&chars[i]=='+'||chars[i-1]=='-'&&chars[i]=='-'
                ||chars[i-1]=='<'&&chars[i]=='<'||chars[i-1]=='>'&&chars[i]=='>'
                ||chars[i]=='='||chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                    id = id.concat(String.valueOf(chars[i]));
                    list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                    i++;
                }
     
                if(chars[i]=='='||chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
                chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||chars[i]=='&'||chars[i]=='|')
                {
                    list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                    id="";
                    id = id.concat(String.valueOf(chars[i]));
                    i++;
                
                    if(i==chars.length){
                        if(deciflag!=0)
                            list.add(new Lexical(id,"Float Literal",String.valueOf(lineNumber)));
                        else {
                            if(negactr==0){list.add(new Lexical(id,"Int Literal",String.valueOf(lineNumber)));}
                        else{
                        list.add(new Lexical(id,"Negative Int Literal",String.valueOf(lineNumber)));}}
                        break;
                    }
                    
                    else if(chars[i-1]=='+'&&chars[i]=='+'||chars[i-1]=='-'&&chars[i]=='-'
                    ||chars[i-1]=='<'&&chars[i]=='<'||chars[i-1]=='>'&&chars[i]=='>'
                    ||chars[i]=='='||chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                        id = id.concat(String.valueOf(chars[i]));
                        list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                        i++;
                        if(i==chars.length){
                            i++;
                            break; }
                        else{
                            flag=0;
                            id="";
                        }
                    }
                }
                
                /*else{
                    i++;
                }*/
                
                if(i==chars.length){
                    list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    break;
                }
                
                else{
                    list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                    flag=0;
                    id="";
                    
                }
    
            }
            
            else {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
        } 
         else if(i+1==chars.length){
        doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                    break;
         }
         /**  else if(chars[i]==']'){
             list.add(new Lexical(id,"Array Size",String.valueOf(lineNumber))); 
             if(Integer.parseInt(id)>100) ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> Error on <span style=\"color:red\">"+id+""
                             + "</span>. Maximum array size is 100.");
                 
             id="";
             id = id.concat(String.valueOf(chars[i]));
             list.add(new Lexical(id,id,String.valueOf(lineNumber))); id="";
             i++; 
             if(chars[i]==';'){
                id = id.concat(String.valueOf(chars[i]));
                list.add(new Lexical(id,id,String.valueOf(lineNumber))); id="";
                i++; 
             } 
             
             else{ ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> Error on <span style=\"color:red\">"+id+""
                             + "</span>. '"+chars[i]+"' is not a valid delimiter."); break;}
         }**/
         }}
//=======================================================================
      else if(chars[i]=='='||chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
            chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||chars[i]=='&'||chars[i]=='|'
              ||chars[i]==';'||chars[i]==',')
            {
              id = id.concat(String.valueOf(chars[i]));
              i++;
              if(i==chars.length){
                  if(chars[i-1]==';')
                      //list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                       doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                  else{
                  doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                  
                  }
              break;} 
               else if(chars[i-1]==';'&&chars[i]=='1'||chars[i-1]==';'&&chars[i]=='2'||chars[i-1]==';'&&chars[i]=='3'||chars[i-1]==';'&&chars[i]=='4'
                      ||chars[i-1]==';'&&chars[i]=='5'||chars[i-1]==';'&&chars[i]=='6'||chars[i-1]==';'&&chars[i]=='7'||chars[i-1]==';'&&chars[i]=='8'
                      ||chars[i-1]==';'&&chars[i]=='9')
                    {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
               
               else if(chars[i-1]=='&'&&chars[i]!='&'||chars[i-1]=='|'&&chars[i]!='|')            {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i-1]+"' is not a valid reserved symbol.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                  
                         id="";
                         flag=0;
                         break;
                     }
                 }
              else if(chars[i-1]=='+'&&chars[i]=='+'||chars[i-1]=='-'&&chars[i]=='-'
                      ||chars[i-1]=='<'&&chars[i]=='<'||chars[i-1]=='>'&&chars[i]=='>'
                      ||chars[i]=='='||chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                  
                  /**if(chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                       id = id.concat(String.valueOf(chars[i]));
                      i++;
                    if(chars[i]=='('||chars[i]=='t'||chars[i]=='f'||chars[i]=='!'||chars[i]==' '||chars[i]=='\n'){
                        
                    }
                    else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
              break;  
                      }
                  }
                
                  else{**/
                id = id.concat(String.valueOf(chars[i]));
                i++;
                 if(i==chars.length){
                  doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                    break;}
                 else{
                 list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                 id=""; //MILLER EDIT 1002
                 
                  if(chars[i-2]=='+'&&chars[i-1]=='+'&&chars[i]==';'
                     ||chars[i-2]=='-'&&chars[i-1]=='-'&&chars[i]==';'){
                  //MILLER EDIT 1002    
                  id = id.concat(String.valueOf(chars[i]));
                  list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                  i++;
                  //========================    
                  if(i==chars.length){
                      break;}
                  }
                  
                  id="";
                 flag=0;}
              //}//else
              }//IF ++ -- << >>
              else{
                  if(chars[i]==' '||chars[i]=='\n'||chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'
           ||chars[i]=='5'||chars[i]=='6'||chars[i]=='7'||chars[i]=='8'||chars[i]=='9'){
              
                list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                
                      if(chars[i]==' '||chars[i]=='\n'){
                        i++;
                      }
           else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z') {
                   id="";
                      id = id.concat(String.valueOf(chars[i]));
            i++;
             if(i==chars.length){
                  list.add(new Lexical(id, "identifier",String.valueOf(lineNumber)));
                      break;}
             else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='_'||
             chars[i]=='A'||chars[i]=='B'||chars[i]=='C'||chars[i]=='D'||chars[i]=='E'
           ||chars[i]=='F'||chars[i]=='G'||chars[i]=='H'||chars[i]=='I'||chars[i]=='J'
           ||chars[i]=='K'||chars[i]=='L'||chars[i]=='M'||chars[i]=='N'||chars[i]=='O'
           ||chars[i]=='P'||chars[i]=='Q'||chars[i]=='R'||chars[i]=='S'||chars[i]=='T'
           ||chars[i]=='U'||chars[i]=='V'||chars[i]=='W'||chars[i]=='X'||chars[i]=='Y'
           ||chars[i]=='Z'){
             int check=1;
             while(check==1){
                 if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='_'||
             chars[i]=='A'||chars[i]=='B'||chars[i]=='C'||chars[i]=='D'||chars[i]=='E'
           ||chars[i]=='F'||chars[i]=='G'||chars[i]=='H'||chars[i]=='I'||chars[i]=='J'
           ||chars[i]=='K'||chars[i]=='L'||chars[i]=='M'||chars[i]=='N'||chars[i]=='O'
           ||chars[i]=='P'||chars[i]=='Q'||chars[i]=='R'||chars[i]=='S'||chars[i]=='T'
           ||chars[i]=='U'||chars[i]=='V'||chars[i]=='W'||chars[i]=='X'||chars[i]=='Y'
           ||chars[i]=='Z'){
            id = id.concat(String.valueOf(chars[i]));
            i++;
           
            IdentifierCount++;
             if(i==chars.length){//if no delimiter found              
               list.add(new Lexical(id, "identifier",String.valueOf(lineNumber)));
                        break;
                    }
            if(IdentifierCount<=32)
               check=1;
            else{
                check=0;
                  doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". Identifier character exceeds 32 limit.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
            }
                  
                      }//if
                 
                 /////BOOKMARK NA DITO TY
                    else if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
          chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
                    chars[i]=='('||chars[i]==')'||chars[i]==';'||chars[i]==','||chars[i]=='}'||
                    chars[i]=='{'||chars[i]==' '||chars[i]=='\t'||chars[i]=='\r'
                   ||chars[i]=='\n'||chars[i]=='='||
                   chars[i]=='['||chars[i]==']'||chars[i]=='&'||chars[i]==','||chars[i]=='|'){
              
                      
                          if(chars[i]==' '||chars[i]=='\n'||chars[i]=='\t'||chars[i]=='\r'){
                           i++; 
                          }
                          else{
                                list.add(new Lexical(id, "identifier",String.valueOf(lineNumber)));
                         id="";
                          id = id.concat(String.valueOf(chars[i]));
                              list.add(new Lexical(id, id,String.valueOf(lineNumber)));i++;}
                        check=0;
                        if(i==chars.length)//if no delimiter found              
                        break;
                        else
                            flag=0;
                        
                    }
                 else {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
             }//while
           if(flag!=0)
               list.add(new Lexical(id, id,String.valueOf(lineNumber)));
           else
               System.out.print("this point2");
            }//if   
             else{
             list.add(new Lexical(id, id,String.valueOf(lineNumber))); i++;}
             
           if(i==chars.length)//if no delimiter found              
                        break;
           else if(flag==0)
               flag=0;
         
            else {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
             
           }//else if  
                   else{
                  list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                  id="";
                  id = id.concat(String.valueOf(chars[i]));
                 // list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                    i++;
                     }
                     if(i==chars.length){
                      break;}
                     else{
                  id="";
                 flag=0;}
                  }//if
                  
                  //MILLER =+
                  else if(chars[i]=='+'&&chars[i+1]=='+'||chars[i]=='-'&&chars[i]=='-'){
                      list.add(new Lexical(id, id, String.valueOf(lineNumber)));
                      id="";
                     
                  }
                  //================================================================
                  
                  else {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
              }
            }
      else if(chars[i]==' '||chars[i]=='\n'||chars[i]=='{'/**||chars[i]==':'**/||chars[i]=='}'||chars[i]==']'||chars[i]=='['
              ||chars[i]=='('||chars[i]==')'||chars[i]=='\t'
              ||chars[i]=='\r'){
          //System.out.print("HELLOETO"); 
          i++;
          if((i==(chars.length))){//IF NOT ARITH OP
                   if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r'){
                   if(chars[i-1]=='\n'){
                     //System.out.print("HELLOETO"); 
                     lineNumber++;
                    
                     break;
                   }
                else
                break;
                   }
                  else{
                      
                 
               id = id.concat(String.valueOf(chars[i-1]));
            
               list.add(new Lexical(id, id, String.valueOf(lineNumber)));
             
            flag=8;
              // break;
               
                          }
          }
          else{
               if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r')
              //i++; 
               {
                if(chars[i-1]=='\n'){
                    
                    lineNumber++;
                    
                     flag=0;
                id="";}
                   else{
                   flag=0;
                id="";}}
                
                else{
              id = id.concat(String.valueOf(chars[i-1]));
              list.add(new Lexical(id, id,String.valueOf(lineNumber)));
           
         // i++;
           id="";
           int delimCheck =0;
           //flag=0;
           if(chars[i-1]=='('){
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
                else if(chars[i]==','||chars[i]=='('||chars[i]==' '||chars[i]=='\n'
          ||chars[i]=='-'||chars[i]=='!'||chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'
                       ||chars[i]=='5'||chars[i]=='6'||chars[i]=='7'||chars[i]=='8'
                       ||chars[i]=='9'){
                   delimCheck=1;
               }
               else
                   delimCheck=0;
           }
           else if(chars[i-1]==')'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
                else if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
          chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
                   chars[i]==')'||chars[i]==';'||chars[i]==','||chars[i]=='&'||
                    chars[i]=='{'||chars[i]==' '||chars[i]=='\t'||chars[i]=='\r'
                   ||chars[i]=='\n'||chars[i]==','||chars[i]=='|'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
    
           else if(chars[i-1]==';'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]==';'
          ||chars[i]=='\n'||chars[i]==' '||chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
           
         else if(chars[i-1]==':'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]=='\n'||chars[i]==' '){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
        else if(chars[i-1]=='{'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]=='{'||chars[i]=='\''||chars[i]=='\"'||chars[i]=='}'
          ||chars[i]=='\n'||chars[i]==' '||chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'
                       ||chars[i]=='5'||chars[i]=='6'||chars[i]=='7'||chars[i]=='8'
                       ||chars[i]=='9'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
        else if(chars[i-1]=='}'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]==';'
          ||chars[i]=='\n'||chars[i]==' '||chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
           
           else if(chars[i-1]=='['){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'
                       ||chars[i]=='5'||chars[i]=='6'||chars[i]=='7'||chars[i]=='8'
                       ||chars[i]=='9'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
           
           else if(chars[i-1]==']'){
               
                id = id.concat(String.valueOf(chars[i-1]));
               
                if(i==chars.length)//if no delimiter found              
                        break;
           else if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
          chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
                   chars[i]==')'||chars[i]==';'||chars[i]=='.'||chars[i]=='&'
                   ||chars[i]==' '||chars[i]=='\t'||chars[i]=='\r'
                   ||chars[i]=='\n'||chars[i]=='|'){
                    id="";
                   delimCheck=1;
                 
               }
               else
                   delimCheck=0;
           }
           
           if(delimCheck==1)
               flag=0;
           else {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter for "+chars[i-1]+".\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
               
                }
                    
              
          }
      }
//========================================================STRING LITERAL====
      
      //ERROR ON ESCAPE SEQUENCE '//'
      else if(chars[i]=='"'){
           id = id.concat(String.valueOf(chars[i]));
       //    list.add(new Lexical(id, id,String.valueOf(lineNumber)));
        //   id="";
          i++;
         while(chars[i]!='"'){
              if(chars[i]=='\\'&&chars[i+1]!='\\'&&
                chars[i]=='\\'&&chars[i+1]!='n'&&   
                 chars[i]=='\\'&&chars[i+1]!='t'&&   
                 chars[i]=='\\'&&chars[i+1]=='"'&&chars[i+2]!='"'){
        id = id.concat("\\");
        id = id.concat(String.valueOf(chars[i+1]));
                // ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                //             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i+1]+"' is not a valid string literal. [\\] is expected.");
                  doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid string literal.[\\] is expected.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 //flag=8;
                 //break; 
             }
             else if(chars[i]=='\\' && chars[i+1]=='n'){
                 id = id.concat("\n");
                 i=i+2;
             }
             else if(chars[i]=='\\' && chars[i+1]=='t'){
                 id = id.concat("\t");
                 i=i+2;
             }
              else if(chars[i]=='\\' && chars[i+1]=='\\'){
                 id = id.concat("\\");
                 i=i+2;
             }
           
                else if(chars[i]=='\\' && chars[i+1]=='"'){
                 id = id.concat("\"");
                 i=i+2;
             }
           /**
            else if(chars[i+1]=='\\'){
                        
                 id = id.concat(String.valueOf(chars[i]));
                 id = id.concat("\\");
                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                             + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i+1]+"' is not a valid string literal. [\\] is expected.");
               
                 flag=8;
                 break; 
          
             }**/
            else if(chars[i+1]=='\n'){
             id = id.concat(String.valueOf(chars[i]));
            lineNumber++;
            i++;
            }
             else{
             id = id.concat(String.valueOf(chars[i]));
             i++;}
                if(i+1==chars.length&&chars[i]!='"'){
         // ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
           //                  + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. \" is expected.");
        doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter. \n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                      flag=8;
                    break;

                }
         }
         
        
          if(chars[i]=='"'){ 
         
        
        // id="";
        id = id.concat(String.valueOf(chars[i]));
         //  list.add(new Lexical(id, id,String.valueOf(lineNumber)));
            list.add(new Lexical(id, "string literal",String.valueOf(lineNumber)));
         i++;
         if(i==chars.length){         
              break;
          }
    
         else{
             if(chars[i]==';'||chars[i]==','||chars[i]=='+'){
                    id="";
         id = id.concat(String.valueOf(chars[i]));
           list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                    if((i+1)==chars.length){
                         id="";
                        id = id.concat(String.valueOf(chars[i]));
                        //list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        
                        break;}
                    else{
                         id="";
                        id = id.concat(String.valueOf(chars[i]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        
                        
                        i++;
                        flag=0;
                        id="";}
             }   
                else if(chars[i]=='!'||chars[i]=='@'||chars[i]=='#'||chars[i]=='$'||chars[i]=='%'||chars[i]=='^'||chars[i]=='*'||chars[i]=='&'||chars[i]=='('
                     ||chars[i]==')')  {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
             else{
                 i++;
             flag=0;
             id="";}
         }
      } //if"
       
         }
      
//==========================================================================
//===============================================================CHAR LITERAL
     else if(chars[i]=='\''){
     id="";
         id = id.concat(String.valueOf(chars[i]));
        //   list.add(new Lexical(id, id,String.valueOf(lineNumber)));
        //   id="";
       i++;
             id = id.concat(String.valueOf(chars[i]));
      
      i++;
      if(i==chars.length){//if no delimiter found
              
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found. \n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                        flag=8;
                    break;
                    }
      else if(chars[i]=='\''){
          id = id.concat(String.valueOf(chars[i]));
             list.add(new Lexical(id, "character literal",String.valueOf(lineNumber)));
          //    id="";
        
         //  list.add(new Lexical(id, id,String.valueOf(lineNumber)));
         if((i+1)==chars.length){    
             
              break;
          }
    
         else{
             i++;
             if(chars[i]==';'||chars[i]==','){
                    if((i+1)==chars.length){
                         id = id.concat(String.valueOf(chars[i]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        
                        break;}
                    else{
                        //System.out.print("hello");
                        id="";
                        id = id.concat(String.valueOf(chars[i]));
                        list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        
                        i++;
                        flag=0;
                        id="";}
             }   
                  else if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'||chars[i]=='f'||chars[i]=='g'||
                        chars[i]=='h'||chars[i]=='i'||chars[i]=='j'||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||
                        chars[i]=='o'||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'||chars[i]=='u'||
                        chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'||chars[i]=='z')
             {//ERROR TRAP 
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
             else{
             flag=0;
             id="";}
         }
         }//if '
         //ERROR TRAp=============
          else if(chars[i]!='\''){
          //    ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
            //                 + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter. [\'] is expected.");
          LexError=1;
          doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
          }
           
         }
     
     
//===========================================================================

 
      else{
          id = id.concat(String.valueOf(chars[i]));
          flag=9;
      }
      
//=================== IDENTIFIER ==============================================
      if(flag==3){
     
          int check, checker;
         
           if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
          chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
                    chars[i]=='('||chars[i]==')'||chars[i]==';'||chars[i]==','||chars[i]=='}'||
                    chars[i]=='{'||chars[i]==' '||chars[i]=='\t'||chars[i]=='\r'
                   ||chars[i]=='\n'||chars[i]=='='||
                   chars[i]=='['||chars[i]==']'||chars[i]=='&'||chars[i]==','||chars[i]=='|'){//DELIMITER
               //IF RESERVED WORD IS SLIGHTLY SIMILAR TO IDENTIFIER
                check=1;
            checker=0;
            //RESERVED OPERATORS========================================
            if(chars[i]=='='||chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
            chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||chars[i]=='&'||chars[i]=='|')
            {
                
              list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
              id="";
              id = id.concat(String.valueOf(chars[i]));
           
              i++;
               
               if(i==chars.length){
               list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        break;
               }
               else{
               if(chars[i-1]=='+'&&chars[i]=='+'||chars[i-1]=='-'&&chars[i]=='-'
                      ||chars[i-1]=='<'&&chars[i]=='<'||chars[i-1]=='>'&&chars[i]=='>'
                      ||chars[i]=='='||chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                   id = id.concat(String.valueOf(chars[i]));
                   if((i+1)==chars.length){
               list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        break;
               }
                    else{
                 
                   list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                   i++;}
               }
               else
                   list.add(new Lexical(id, id,String.valueOf(lineNumber)));
              checker=1;
              //break;
            }}
   
            //===========================================================
            else //if not arith op
                i++;
        if((i==(chars.length))&&checker==0){//IF NOT ARITH OP
                   if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r')
                list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                  else{
                  list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                id="";
               id = id.concat(String.valueOf(chars[i-1]));
               list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                          }
                break;
                }
             else if(i==(chars.length)&&checker==1){//IF ARITH OP
                  //list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                
                  flag=8;
                }
              else if(checker==1){//IF MAY KASUNOD YUNG ARITH OP
                   if(chars[i-2]=='+'&&chars[i-1]=='+'&&chars[i]==';'
                     ||chars[i-2]=='-'&&chars[i-1]=='-'&&chars[i]==';'){i++;
                  if(i==chars.length)
                      break;
                  }
                 flag=0;
                id="";
                
               
                //break; 
              }
              else if(checker==0){
                
                
                if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r'){
                list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                if(chars[i-1]=='\n'){
                    lineNumber++;
                }
                }
                else{
               list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
               id="";
              id = id.concat(String.valueOf(chars[i-1]));
              list.add(new Lexical(id, id,String.valueOf(lineNumber)));
          
                }
                    
               flag=0;
                id="";
                //break;
              }
                 }//IF SYMBOL
          
           else{ //IF NOT SYMBOL, PROCEED TO LETTERS
               check=0;
       
           }
          while(check==0){
             
            if(chars[i]=='a'||chars[i]=='b'||chars[i]=='c'||chars[i]=='d'||chars[i]=='e'
           ||chars[i]=='f'||chars[i]=='g'||chars[i]=='h'||chars[i]=='i'||chars[i]=='j'
           ||chars[i]=='k'||chars[i]=='l'||chars[i]=='m'||chars[i]=='n'||chars[i]=='o'
           ||chars[i]=='p'||chars[i]=='q'||chars[i]=='r'||chars[i]=='s'||chars[i]=='t'
           ||chars[i]=='u'||chars[i]=='v'||chars[i]=='w'||chars[i]=='x'||chars[i]=='y'
           ||chars[i]=='z'||chars[i]=='_'||
             chars[i]=='A'||chars[i]=='B'||chars[i]=='C'||chars[i]=='D'||chars[i]=='E'
           ||chars[i]=='F'||chars[i]=='G'||chars[i]=='H'||chars[i]=='I'||chars[i]=='J'
           ||chars[i]=='K'||chars[i]=='L'||chars[i]=='M'||chars[i]=='N'||chars[i]=='O'
           ||chars[i]=='P'||chars[i]=='Q'||chars[i]=='R'||chars[i]=='S'||chars[i]=='T'
           ||chars[i]=='U'||chars[i]=='V'||chars[i]=='W'||chars[i]=='X'||chars[i]=='Y'
           ||chars[i]=='Z'||chars[i]=='1'||chars[i]=='2'||chars[i]=='3'||chars[i]=='4'||chars[i]=='5'
                    ||chars[i]=='6'||chars[i]=='7'||chars[i]=='8'||chars[i]=='9'){
            id = id.concat(String.valueOf(chars[i]));
            i++;
           
            IdentifierCount++;
             if(i==chars.length){//if no delimiter found
              
                     doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". No delimiter found.\n" , null);
                        list.add(new Lexical(id,id, String.valueOf(lineNumber)));
flag=8;
                    break;
                    }
            if(IdentifierCount<=32)
               check=0;
            else{
             //  ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
               //              + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. Identifier characters exceeds the 31 limit.");
              //break;
              doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". Identifier characters exceeds the 31 limit.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
            
            }
            }//if
            
            
             else if(chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
          chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||
                    chars[i]=='('||chars[i]==')'||chars[i]==';'||chars[i]==','||
                    chars[i]=='{'||chars[i]==' '||chars[i]=='\n'||chars[i]=='='||
                   chars[i]=='['||chars[i]==']'||chars[i]=='&'||chars[i]==','||chars[i]=='|'){//DELIMITER
               //IF RESERVED WORD IS SLIGHTLY SIMILAR TO IDENTIFIER
                check=1;
            checker=0;
            //RESERVED OPERATORS========================================
            if(chars[i]=='='||chars[i]=='+'||chars[i]=='-'||chars[i]=='*'||chars[i]=='/'||
            chars[i]=='%'||chars[i]=='!'||chars[i]=='<'||chars[i]=='>'||chars[i]=='&'||chars[i]=='|')
            {
              list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
              id="";
              id = id.concat(String.valueOf(chars[i]));
              //list.add(new Lexical(id, id));
              i++;
if(i==chars.length){
               list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        break;
               }
               else{
               if(chars[i-1]=='+'&&chars[i]=='+'||chars[i-1]=='-'&&chars[i]=='-'
                      ||chars[i-1]=='<'&&chars[i]=='<'||chars[i-1]=='>'&&chars[i]=='>'
                      ||chars[i]=='='||chars[i-1]=='&'&&chars[i]=='&'||chars[i-1]=='|'&&chars[i]=='|'){
                   id = id.concat(String.valueOf(chars[i]));
                   if((i+1)==chars.length){
               list.add(new Lexical(id,id,String.valueOf(lineNumber)));
                        break;
               }
                    else{
                 
                   list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                   i++;}
               }
               else
                   list.add(new Lexical(id, id,String.valueOf(lineNumber)));
              checker=1;
              //break;
            }}
            
            //===========================================================
            else //if not arith op
                i++;
            if((i==(chars.length))&&checker==0){//IF NOT ARITH OP
                   if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r')
                list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                  else{
                  list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                id="";
               id = id.concat(String.valueOf(chars[i-1]));
               list.add(new Lexical(id, id,String.valueOf(lineNumber)));
                          }
                break;
                }
              else if(i==(chars.length)&&checker==1){//IF ARITH OP
                  //list.add(new Lexical(id,"identifier"));
                  break;
                }
              else if(checker==1){//IF MAY KASUNOD YUNG ARITH OP
                    if(chars[i-2]=='+'&&chars[i-1]=='+'&&chars[i]==';'
                     ||chars[i-2]=='-'&&chars[i-1]=='-'&&chars[i]==';'){i++;
                  if(i==chars.length)
                      break;
                  }
                 flag=0;
                id="";
                
                
                //break; 
              }
           else if(checker==0){
                
                
                       if(chars[i-1]==' '||chars[i-1]=='\n'||chars[i-1]=='\t'||chars[i-1]=='\r'){
                list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
                  if(chars[i-1]=='\n'){
                    lineNumber++;
                }
                       }
                else{
               list.add(new Lexical(id,"identifier",String.valueOf(lineNumber)));
               id="";
              id = id.concat(String.valueOf(chars[i-1]));
              list.add(new Lexical(id, id,String.valueOf(lineNumber)));
          
                }
                    
               flag=0;
                id="";
                //break;
              }
             }//else if DELIMITER
            
             else{//ERROR TRAP FOR DELIMITER OF Identifier
               // ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
                 //            + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. '"+chars[i]+"' is not a valid delimiter.");
            // break;
                    doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". '"+chars[i]+"' is not a valid delimiter.\n" , null);
               list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
                         break;
                     }
                 }
          }

      if(flag==9)
          System.out.print("Error");
          //list.add(new Lexical("error","error"));
          
   //LORZANO BEATRIZ 2018
      }///if flag =3 
      
       else if(flag==9){
        // ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> LEXICAL ERROR on <span style=\"color:red\">"+id+""
          //                   + "</span>,<span style=\"color:red\"> Line "+lineNumber+"</span>. It is not a valid character for a reserved word, symbol, or identifier.");
          //list.add(new Lexical("error","error"));
                  doc.insertString(doc.getLength(), "\nLEXICAL ERROR on "+id+""
                             + ", Line "+lineNumber+". It is not a valid character for a reserved word, symbol, or identifier.\n" , null);
               //list.add(new Lexical(id,id, String.valueOf(lineNumber)));
                     i++;
                    
              if(i==(chars.length)){
                         id="";
                        flag=8;
                    break;}
                     else{
                         id="";
                         flag=0;
//                         /break;
                     }
          
      }
       else if(flag==8){
           //System.out.print("Token:"+list.get(0).Token);
           break;
       }
        else if(flag==0){
          continue; }
       else
          //list.add(new Lexical("error","error"));
            System.out.print("error");
      
      if(flag==0){
          System.out.print("Cont:"+flag);
         //break gohere;
      }
  
     } //if flag =0 ---the program will check again
      
     int size = list.size();
    //   System.out.print(size);
        return list;
        
 
    
    }
    
    public class Syntax{
       public String Production;
       public String Syntax;
 
        public Syntax(String Production, String Syntax)
        {
            this.Production = Production;
            this.Syntax = Syntax;
            
        
        }
    }
//==================================================Syntax Analyzer==========================================
    
    public ArrayList SynAnalyze() throws BadLocationException{
        ErrorTxt.setText(null);
        int listctr=0, flag=0, LexError=0; //const==1
  
        ArrayList<Lexical> list = ListLexical();
        ArrayList<Syntax> listSyntax = new ArrayList<Syntax>();
        String iden="";
       // ErrorTxt.getDocument().getText(flag, WIDTH)

                String fontfamily = ErrorTxt.getFont().getFamily();//font for error list
     if(ErrorTxt.getDocument().getLength()!=0){
             ErrorTxt.setText(null);
                    JOptionPane.showMessageDialog(null, "Lexical Error found! Click Lexical button to check","Error",JOptionPane.ERROR_MESSAGE);
                    LexError=1;
                   
                    
                }
     
     
if(LexError==0){
        while(listctr<=list.size()){
             if(list.get(0).Token=="attention"){
               // listSyntax.add(new Lexical("<program",));
                listctr=listctr+2;
                iden ="";
                iden = iden.concat("attention: ");
                listSyntax.add(new Syntax("<program> ",iden));
               
                
             }//if attention
             else{
                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'attention:' to start the program. ");
             break;
             }//else not attention
              /////DISMISS///////////////////////////////////////////////////////////////////////
             if(list.get(list.size()-1).Token=="dismiss"){
                  iden="";
                iden = iden.concat("dismiss ");
                listSyntax.add(new Syntax("<program> ",iden));
                System.out.print("nn");
             }//if dismiss
             else{
         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR: Expecting 'dismiss' to end the program. ");
              
              break;
             }//else not dismisss
             ////1 GLOBAL DECLARATION//////////////////////////////////////////////////////////
             if(list.get(listctr).Token=="dismiss"){
                 System.out.print("");
             }
             else if(list.get(listctr).Token=="const"||list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"
                    ||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="assemble"||list.get(listctr).Token=="onduty"){
               
                  iden="";
                           iden = iden.concat("<gdeclr>");
                         listSyntax.add(new Syntax("<program> ",iden));
                 
                  while(list.get(listctr).Token=="const"||list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"
                    ||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="assemble"||list.get(listctr).Token=="onduty"){
                    
                    if(list.get(listctr).Token=="const"){
                       while(list.get(listctr).Token.equals("const")){
                           iden="";
                           iden = iden.concat("<constdec>");
                         listSyntax.add(new Syntax("<gdeclr> ",iden));
                         ///
                          iden="";
                            iden = iden.concat(list.get(listctr).Token);
                            listSyntax.add(new Syntax("<constdec> ",iden));
                            
                         listctr++;
                         
                          if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"){
                            iden="";
                            iden = iden.concat("<cdtype>");
                            listSyntax.add(new Syntax("<constdec> ",iden));
                            iden="";
                             iden = iden.concat(list.get(listctr).Token+" ");
                              listctr++;
                            
                            
                            if(list.get(listctr).Token=="identifier"){
                                iden = iden.concat("id");
                                 listSyntax.add(new Syntax("<cdtype> ",iden));
                                listctr++;
                                
                                if(list.get(listctr).Token.equals("=")){
                                    
                                    listctr++;
                                  if(list.get(listctr).Token=="false"||list.get(listctr).Token=="true"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                    
                            
                                 
                                        if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token=="Int Literal"){
                                              iden="";
                            iden = iden.concat("<init1>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init1> ",iden));
                                                 iden="";
                            iden = iden.concat("<intlit1>");
                            listSyntax.add(new Syntax("<init1> ",iden));
                                            iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<intlit1> ",iden));
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="flt"&&list.get(listctr).Token=="Float Literal"){
                                                    iden="";
                            iden = iden.concat("<init2>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init2> ",iden));
                                                 iden="";
                            iden = iden.concat("<fltlit>");
                            listSyntax.add(new Syntax("<init2> ",iden));
                                            iden="";
                            iden = iden.concat("float literal");
                            listSyntax.add(new Syntax("<fltlit> ",iden));
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="true"||
                                                 list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="false"){
                                             
                                                   iden="";
                            iden = iden.concat("<init3>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init3> ",iden));
                                                 iden="";
                            iden = iden.concat("<boollit>");
                            listSyntax.add(new Syntax("<init3> ",iden));
                                            iden="";
                            iden = iden.concat("boolean literal");
                            listSyntax.add(new Syntax("<boolit> ",iden));
                                            listctr++;
                                        }
                            else if(list.get(listctr-3).Token=="str"&&list.get(listctr).Token=="string literal"){
                                                    iden="";
                           iden = iden.concat("<init4>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                                 iden="";
                            iden = iden.concat("<strlit>");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                            iden="";
                            iden = iden.concat("string literal");
                            listSyntax.add(new Syntax("<strlit> ",iden));
                                            listctr++;
                                        }
                                      else if(list.get(listctr-3).Token=="chr"&&list.get(listctr).Token=="character literal"){
                                                    iden="";
                            iden = iden.concat("<init5>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init5> ",iden));
                                                iden="";
                            iden = iden.concat("character literal");
                            listSyntax.add(new Syntax("<chrlit> ",iden));
                                            listctr++;
                                        }
                                        
                                  
                                        else if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token.equals("(")){
                                            listctr++;
                                            if(list.get(listctr).Token=="Negative Int Literal"){
                                                
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Negative Integer Literal'. ");  
                                       break; 
                                            }//else not negative int lit 
                                            //IBOOKMARK MO TO
                                        }
                                        else{
                                            
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");  
                                         flag=1;
                                       break;
                                        }
                                        
                                         if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                          iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<constdec> ",iden));
                                    
                            
                                            listctr++;
                                            break;
                                        }
                                         else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");  
                                       break; 
                                         }
                                    }//if LITERAL
                                    else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                    break;
                                    }//else not LITERAL
                                }//if
                                else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '='. ");
                                break;
                                }//else not = 
                                
                            }//if identifier
                            else{
                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Identifier'. ");   
                            break;
                            }//else not identifier
                          }//if 
                          else{
                            ErrorTxt.setText("\"<body style=\\\"font-family: \"+fontfamily+\"\\\"> SYNTAX ERROR on Line <span style=\\\"color:red\\\"> \"+list.get(listctr).Line+\"</span>. Unexpected '<span style=\\\"color:red\\\">\"+list.get(listctr).Lexeme+\"\"\n" +
"                             + \"</span>'. Expecting 'Data type'. \"");
                          break;
                          }//else
                         
                       }//WHILE CONST
                    
                    }//IF CONST
                  ///////////////////////////////STRUCT DECLARATION ASSEMBLE/////////////////////////////////////////////
                    else if(list.get(listctr).Token=="assemble"){
                  while(list.get(listctr).Token=="assemble"){
                        iden="";
                            iden = iden.concat("<structdec>");
                            listSyntax.add(new Syntax("<gdeclr> ",iden));
                            iden="";
                            iden = iden.concat("assemble");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                   listctr++;
                    if(list.get(listctr).Token=="identifier"){
                                iden="";
                            iden = iden.concat("id");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                                listctr++;
                                if(list.get(listctr).Token.equals("{")){
                                  
                                  iden="";
                            iden = iden.concat("{");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                                listctr++;
                                      if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"){
                            while(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"){
                                iden="";
                            iden = iden.concat("<sdeclr>");
                            listSyntax.add(new Syntax("<structdec> ",iden));    
                            iden="";
                            iden = iden.concat("<cdtype>");
                            listSyntax.add(new Syntax("<sdeclr> ",iden));    
                            
                            iden = iden.concat(list.get(listctr).Token+" ");
                              listctr++;
                               
                            if(list.get(listctr).Token=="identifier"){
                                iden = iden.concat("id");
                            listSyntax.add(new Syntax("<cdtype> ",iden));    
                            
                                listctr++;
                                
                                if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                 //   System.out.print("H:"+list.get(listctr).Token+" -3: "+list.get(listctr-3).Token+"\n");
                                    if(list.get(listctr).Token=="true"||list.get(listctr).Token=="false"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token=="Int Literal"){
                                            
                                                iden="";
                            iden = iden.concat("<init1>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init1> ",iden));
                                                iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<intlit1> ",iden));
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="flt"&&list.get(listctr).Token=="Float Literal"){
                                                 iden="";
                            iden = iden.concat("<init2>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init2> ",iden));
                                                iden="";
                            iden = iden.concat("float literal");
                            listSyntax.add(new Syntax("<fltlit> ",iden));
                                            listctr++;
                                        }
                                         else if((list.get(listctr-3).Token.equals("bool")&&list.get(listctr).Token=="true")||
                                                 (list.get(listctr-3).Token.equals("bool")&&list.get(listctr).Token=="false")){
                                                     iden="";
                            iden = iden.concat("<init3>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init3> ",iden));
                                                iden="";
                            iden = iden.concat("boolean literal");
                            listSyntax.add(new Syntax("<boollit> ",iden));
                                            listctr++;
                                        //    System.out.print("ober here");
                                        }
                                  else if(list.get(listctr-3).Token=="str"&&list.get(listctr).Token=="string literal"){
                                                    iden="";
                           iden = iden.concat("<init4>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                                 iden="";
                            iden = iden.concat("<strlit>");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                            iden="";
                            iden = iden.concat("string literal");
                            listSyntax.add(new Syntax("<strlit> ",iden));
                                            listctr++;
                                        }
                                      else if(list.get(listctr-3).Token=="chr"&&list.get(listctr).Token=="character literal"){
                                                    iden="";
                            iden = iden.concat("<init5>");
                            listSyntax.add(new Syntax("<cdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init5> ",iden));
                                                iden="";
                            iden = iden.concat("character literal");
                            listSyntax.add(new Syntax("<chrlit> ",iden));
                                            listctr++;
                                        }
                                        else if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token.equals("(")){
                                            listctr++;
                                            if(list.get(listctr).Token=="Negative Int Literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Negative Integer Literal'. ");  
                                        flag=1; //so it wont proceed to the next if
                                             break; 
                                            }//else not negative int lit
                                        }
                                        else{
                                           // System.out.print("Here sample:"+list.get(listctr).Token);
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");  
                                        flag=1; //so it wont proceed to the next if
                                         break;
                                        }
                                        
                                         if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                                  
                                                iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<sdeclr> ",iden));
                                             listctr++;
                                             
                                        }
                                         else{
                                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");  
                                      flag=1; //so it wont proceed to the next if
                                            break; 
                                         }
                                    }//if LITERAL
                                    else{
                                        ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Literal'. ");
                                     flag=1; //so it wont proceed to the next if
                                        break;
                                    }//else not LITERAL
                                }//if
                                else{
                                        ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '='. ");
                                flag=1;
                                        break;
                                
                                }//else not = 
                                
                            }//if identifier
                            else{
                             ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Identifier'. ");   
                             flag=1; //so it wont proceed to the next if
                             break;
                           
                            }//else not identifier 
                            }//WHILE DATATYYPE
                            if(flag==0){
                           if(list.get(listctr).Token.equals("}")||list.get(listctr).Token.equals(" }")){
                            iden="";
                            iden = iden.concat("}");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                               listctr++;
                      
                             if(list.get(listctr).Token.equals(";")){
                                 iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                             listctr++;
                             
                             }
                             else if(list.get(listctr).Token.equals("identifier")){
                                      iden="";
                            iden = iden.concat("<objvar>");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                             listctr++;
                                if(list.get(listctr).Token.equals(";")){
                                         iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                                listctr++;
                                }
                                else{
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                          break;
                          }//else
                             }
                             else{
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';' or Identifier. ");
                          break;
                          }//else
                             }
                          
                          else{
                                      
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Datatype or '}'. ");
                          break;
                          }//else
                            }     }//if Datatype=== assemble id{ int
                          
                           else if(list.get(listctr).Token.equals("}")){
                                      iden="";
                            iden = iden.concat("}");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                             listctr++;
                             if(list.get(listctr).Token.equals(";")){
                                        iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                             listctr++;
                             
                             }
                             else if(list.get(listctr).Token.equals("identifier")){
                                        iden="";
                            iden = iden.concat("<objvar");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                             listctr++;
                                if(list.get(listctr).Token.equals(";")){
                                        iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<structdec> ",iden));
                                listctr++;
                                }
                                else{
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                          break;
                          }//else
                             }
                             else{
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';' or Identifier. ");
                          break;
                          }//else
                             }
                           
                          else{
                            System.out.print("This:"+list.get(listctr).Token);
                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '}' or Data type. ");
                          break;
                          }//else
                      
                                }
                                else{
                                   ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '{'. ");
                                      break; 
                                }
                   
                    }
                    else{
                       ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                          break; 
                    }
                   
                   }}//if struct dec
                    
                  ////////////////////////////////////END OF STRUCT DEC///////////////////////////////////////////////////
                 ////////////////////////////////1 VARIABLE DECLARATION///////////////////////////////////////////////////////
                    else if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                    while(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                     listctr++;
                            
                            if(list.get(listctr).Token=="identifier"){
                                listctr++;
                                
                                if(list.get(listctr).Token.equals("=")){
                                           iden="";
                            iden = iden.concat("<vardec>");
                            listSyntax.add(new Syntax("<gdeclr> ",iden));
                            
                                   iden="";
                            iden = iden.concat("<vdtype>");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                            
                                    listctr++;
                                    if(list.get(listctr).Token=="true"||list.get(listctr).Token=="false"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token=="Int Literal"){
                                            iden="";
                            iden = iden.concat("int id");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                                 iden="";
                            iden = iden.concat("<init1>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init1> ",iden));
                            iden="";
                            iden = iden.concat("<intlit1>");
                            listSyntax.add(new Syntax("<init1> ",iden));
                                                iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<intlit1> ",iden));
                            
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="flt"&&list.get(listctr).Token=="Float Literal"){
                                             iden="";
                                             iden = iden.concat("flt id");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                                 iden="";
                            iden = iden.concat("<init2>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init2> ",iden));
                            iden="";
                            iden = iden.concat("<fltlit>");
                            listSyntax.add(new Syntax("<init2> ",iden));
                                                iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<fltlit> ",iden));
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="true"||
                                                 list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="false"){
                                                 iden="";
                                             iden = iden.concat("bool id");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                                 iden="";
                            iden = iden.concat("<init5>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init5> ",iden));
                            iden="";
                            iden = iden.concat("<boollit>");
                            listSyntax.add(new Syntax("<init5> ",iden));
                                                iden="";
                            iden = iden.concat("boolean literal");
                            listSyntax.add(new Syntax("<boollit> ",iden));
                                            listctr++;
                                        }
                              else if(list.get(listctr-3).Token=="str"&&list.get(listctr).Token=="string literal"){
                                                    iden="";
                           iden = iden.concat("<init4>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                    iden="";
                            
                                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                                 iden="";
                            iden = iden.concat("<strlit>");
                            listSyntax.add(new Syntax("<init4> ",iden));
                                            iden="";
                            iden = iden.concat("string literal");
                            listSyntax.add(new Syntax("<strlit> ",iden));
                                            listctr++;
                                        }
                                      else if(list.get(listctr-3).Token=="chr"&&list.get(listctr).Token=="character literal"){
                                                    iden="";
                            iden = iden.concat("<init5>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                                    iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init5> ",iden));
                                                iden="";
                            iden = iden.concat("character literal");
                            listSyntax.add(new Syntax("<chrlit> ",iden));
                                            listctr++;
                                        }
                                        else if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token.equals("(")){
                                            listctr++;
                                            if(list.get(listctr).Token=="Negative Int Literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Negative Integer Literal'. ");  
                                             flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else{
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. "); 
                                         flag=1;
                                       break;
                                        }
                     /////////////////////////////////SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////   
                                         if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                                 iden="";
                                             iden = iden.concat(";");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                      
                                            listctr++;
                                            break;
                                        }
                                    else if(list.get(listctr).Token.equals(",")){
                                        
                                    while(list.get(listctr).Token.equals(",")){
                                        
                                    listctr++;
                                    if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    if(list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            
                                              iden="";
                                             iden = iden.concat(",");
                            listSyntax.add(new Syntax("<sep1> ",iden));
                             iden="";
                                             iden = iden.concat("id");
                            listSyntax.add(new Syntax("<sep1> ",iden));
                             iden="";
                                             iden = iden.concat("<init1>");
                            listSyntax.add(new Syntax("<sep1> ",iden));
                             iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init1> ",iden));
                             iden="";
                            iden = iden.concat("<intlit1>");
                            listSyntax.add(new Syntax("<init1> ",iden));
                                                iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<intlit1> ",iden));
                                            
                                            listctr++;
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'Int Literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    }//if ALL literal
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    
                                        }
                                        if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                          iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                            listctr++;
                                       
                                         break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'.  Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                            
                                           
                                       break; 
                                        }
                                        
                                    }//if
                                    
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting identifier. ");
                                          flag=1;
                                break;
                                    }//else
                                     //System.out.print("comma na"+list.get(listctr).Token);
                                }//while ,
                                 }//else if ,
                                         else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'.  Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                         }
                                    }//if LITERAL
                                    else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                        flag=1;
                                    break;
                                    }//else not LITERAL
                                }//if =
                            /////////////////////////////////END OF SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////  
                                 else if(list.get(listctr).Token.equals(",")){
                                    while(list.get(listctr).Token.equals(",")){
                                    listctr++;
                                    
                                    iden = iden.concat("<vardec>");
                            listSyntax.add(new Syntax("<gdeclr> ",iden));
                            
                                   iden="";
                            iden = iden.concat("<vdtype>");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                       if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    if(list.get(listctr).Token=="true"||list.get(listctr).Token=="false"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            
                                             iden="";
                            iden = iden.concat("int id");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                            iden="";
                            iden = iden.concat("<init1>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                            iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init1> ",iden));
                            iden="";
                            iden = iden.concat("<intlit1");
                            listSyntax.add(new Syntax("<init1> ",iden));
                            iden="";
                            iden = iden.concat("integer literal");
                            listSyntax.add(new Syntax("<intlit1> ",iden));
                                            
                                            listctr++;
                                        }//if int lit
                            ///////BOOKMARK//////////////
                                     else if(list.get(listctr-4).Token=="true"&&list.get(listctr).Token=="true"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="true"){
                                            
                                             iden="";
                            iden = iden.concat("bool id");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                            iden="";
                            iden = iden.concat("<init5>");
                            listSyntax.add(new Syntax("<vdtype> ",iden));
                            iden="";
                            iden = iden.concat("=");
                            listSyntax.add(new Syntax("<init5> ",iden));
                            iden="";
                            iden = iden.concat("<boollit>");
                            listSyntax.add(new Syntax("<init5> ",iden));
                            iden="";
                            iden = iden.concat("boolean literal");
                            listSyntax.add(new Syntax("<boollit> ",iden));
                                            
                                            listctr++;
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    }//if ALL literal
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                        iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                        listctr++;
                                      //    System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                      break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                        ////////////////////////FUNCTION DECLARATION///////////////////////////////////////////
                                        else if(list.get(listctr).Token.equals("(")&&list.get(listctr-3).Token=="int"){
                                            iden="";
                            iden = iden.concat("<funcdec>");
                            listSyntax.add(new Syntax("<gdeclr> ",iden));
                            iden="";
                            iden = iden.concat("<rtype>");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                            iden="";
                            iden = iden.concat("int");
                            listSyntax.add(new Syntax("<rtype> ",iden));
                            iden="";
                            iden = iden.concat("id");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                            iden="";
                            iden = iden.concat("(");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                                        listctr++;
                                              //  System.out.print("HERE PO");
                                        }
                 /////////////////////////////////////////END OF FUNCTION DECLARATION//////////////////////////////////
                                        else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'.");  
                                           
                                            flag=1;
                                       break; 
                                        }
                                        }//if =
                 ///////////////////////////FUNCTION DECLARATION///////////////////////////////////////////
                                        else if(list.get(listctr).Token.equals("(")&&list.get(listctr-2).Token=="int"){
                                                                   iden="";
                            iden = iden.concat("<funcdec>");
                            listSyntax.add(new Syntax("<gdeclr> ",iden));
                            iden="";
                            iden = iden.concat("<rtype>");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                            iden="";
                            iden = iden.concat("int");
                            listSyntax.add(new Syntax("<rtype> ",iden));
                            iden="";
                            iden = iden.concat("id");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                            iden="";
                            iden = iden.concat("(");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                                        listctr++;
                                              //  System.out.print("HERE PO");
                                        }
                 /////////////////////////////////////////END OF FUNCTION DECLARATION//////////////////////////////////
                                        else if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                            iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                        listctr++;
                                          //System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                          break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ',' or ';'. "); 
                                            flag=1;
                                       break; 
                                        }
                                        
                                    }//if
                                   
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting identifier. ");
                                          flag=1;
                                break;
                                    }//else
                                }//while ,
                                 }//else if ,
                                else if(list.get(listctr).Token.equals(";")){
                                    iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<vardec> ",iden));
                                    listctr++;
                                    break;
                                }
////////////////////////////////////////ARRAY DECLARATION//////////////////////////////////////////////////////////////////
                                else if(list.get(listctr).Token.equals("[")){
                                    listctr++;
                                    if(list.get(listctr).Token.equals("identifier")){
                                         listctr++;
                                    }
                                    else if(list.get(listctr).Token.equals("Int Literal")){
                                         listctr++;
                                          System.out.print("Here ]"+list.get(listctr).Token);
                                    }
                                    else{
                                  System.out.print("Here Arr Size");
                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ']'. ");
                                
                                 flag=1;break;
                                    }
                                    if(list.get(listctr).Token.equals("]")||list.get(listctr).Token.equals(" ]")){
                                        listctr++;
                                    }
                                   else{
                                         System.out.print("Here ]");
                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ']'. ");
                                flag=1;
                                 break;
                                    }
                                    
                                 if(list.get(listctr).Token.equals(";")){
                                        listctr++;
                                    }
                                   else{
                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ']'. ");
                                flag=1;
                                 break;
                                    }
                                    
                                }

//////////////////////////////END OF ARRAY DECLARATION//////////////////////////////////////////////////////////////////////                                
                                ////////////////////////FUNCTION DECLARATION///////////////////////////////////////////
                                        else if(list.get(listctr).Token.equals("(")&&list.get(listctr-2).Token=="int"||list.get(listctr).Token.equals("(")&&list.get(listctr-2).Token=="flt"||list.get(listctr).Token.equals("(")&&list.get(listctr-2).Token=="onduty"){
                                        listctr++;
                                       
                                              if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"){
                                            while(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"){
                                             listctr++;
                                             if(list.get(listctr).Token=="identifier"){
                                                 listctr++;
                                                 if(list.get(listctr).Token.equals(")")){
                                                     iden="";
                            iden = iden.concat(")");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                                                 listctr++;
                                                 if(list.get(listctr).Token.equals(";")){
                                                     iden="";
                            iden = iden.concat(";");
                            listSyntax.add(new Syntax("<funcdec> ",iden));
                                                 listctr++;
                                                 break;}
                                                   else{
                                                  ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                                                 flag=1;
                                                  break; 
                                             }//else not ;
                                                 
                                             }
                                             else if(list.get(listctr).Token.equals(",")){
                                                 listctr++;
                                                 //System.out.print("Comma");
                                                 if(list.get(listctr).Token.equals("int")||list.get(listctr).Token.equals("flt")||
                                                    list.get(listctr).Token.equals("chr")||list.get(listctr).Token.equals("str")
                                                         ||list.get(listctr).Token.equals("bool")){
                                                     System.out.print("Cont");
                                                 continue;
                                                 
                                                 }
                                                 else{
                                                      ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Data type. ");
                                                flag=1;
                                                      break; 
                                                 }
                                                 
                                                 
                                             }
                                             else{
                                                  ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ',', ';'.  ");
                                                  
                                                flag=1;
                                                  break; 
                                             }//else not id
                                             }
                                             else{
                                                  ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                                                flag=1;
                                                  break; 
                                             }//else not id
                                            }
                                              }
                                              else{
                                                  ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Data type. ");
                                                flag=1;
                                                  break; 
                                              }
                                        }
                 /////////////////////////////////////////END OF FUNCTION DECLARATION//////////////////////////////////
                                else{
                                        ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ',' or ';'. ");
                             flag=1;
                                        break;
                                }//else not = 
                                
                            }//if identifier
                            else{
                             ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");   
                           flag=1;
                             break;
                            }//else not identifier
                          }//while VAR DEC
                 }//if VAR DEC
                       /**   else{
                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on <span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>,<span style=\"color:red\"> Line "+list.get(listctr).Line+"</span>. Datatype not found. ");
                          break;
                          }//else
                          * */
                 else
                        listctr++;
                 //////////////////////////////////END OF VARIABLE DECLARATION/////////////////////////////////////////////
                  }//WHILE GLOBAL DECLARATION
           //IF NO ERROR in variable declaration
           if(flag==0){
                  //////BODY///////////////////////////////////////////////////////////////////////
                  
         
           if(list.get(listctr).Token==("command")){
                     listctr++;
                     //System.out.print("command");
                     iden="";
                            iden = iden.concat("<body>");
                            listSyntax.add(new Syntax("<program> ",iden));
                            
                     if(list.get(listctr).Token.equals("(")){
                                        listctr++;
                          if(list.get(listctr).Token.equals(")")){
                              iden="";
                            iden = iden.concat("command()");
                            listSyntax.add(new Syntax("<body> ",iden));
                            iden="";
                            iden = iden.concat("<statements4>");
                            listSyntax.add(new Syntax("<body> ",iden));
                                        listctr++;
                                        
                     if(list.get(listctr).Token.equals("startmission")){
                                        listctr++;
                                      if(list.get(listctr).Token.equals(":")){
                                          iden="";
                            iden = iden.concat("startmission:");
                            listSyntax.add(new Syntax("<statements4> ",iden));
                                        listctr++;
                       //if loop command
                     if(list.get(listctr).Token==("command")||list.get(listctr).Token==("endmission")||list.get(listctr).Token==("fallin")||list.get(listctr).Token==("Identifier")
                              ||list.get(listctr).Token==("if")||list.get(listctr).Token==("for")||list.get(listctr).Token==("do")||list.get(listctr).Token==("++")||list.get(listctr).Token==("report")
                               ||list.get(listctr).Token==("execute")){
                           while(list.get(listctr).Token==("command")||list.get(listctr).Token==("endmission")||list.get(listctr).Token==("fallin")||list.get(listctr).Token==("Identifier")
                              ||list.get(listctr).Token==("if")||list.get(listctr).Token==("for")||list.get(listctr).Token==("do")||list.get(listctr).Token==("++")||list.get(listctr).Token==("report")
                                   ||list.get(listctr).Token==("execute"))
                           {//WHILE LOOP COMMAND 
                                         
                                                if(list.get(listctr).Token.equals("endmission")){
                                                listctr++;
                                                flag=1;
                                               }//if endmission
                                                   ////////////////////////STATEMENTS2 OR STATEMENT IN BODY//////////////////////////////////////////////////////////////////////////////////////
                                               else if(list.get(listctr).Token.equals("fallin")){
                                                listctr++;
                                                    if(list.get(listctr).Token.equals("{")){
                                                    listctr++;
                                                    
                                                     if(list.get(listctr).Token.equals("}")){
                                                    listctr++;
                                                    flag=1;
                                                     }
                                                      ////////////////////////////////VARIABLE DECLARATION///////////////////////////////////////////////////////
                    else if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                    while(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                     listctr++;
                            if(list.get(listctr).Token=="identifier"){
                                listctr++;
                                
                                if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    
                                    if(list.get(listctr).Token=="true"||list.get(listctr).Token=="false"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="flt"&&list.get(listctr).Token=="Float Literal"){
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="true"||
                                                 list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="false"){
                                            listctr++;
                                        }
                                        else if(list.get(listctr-3).Token=="str"&&list.get(listctr).Token.equals("\"")){
                                            listctr++;
                                            if(list.get(listctr).Token=="string literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting String Literal. "
);  
                                       flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else if(list.get(listctr-3).Token=="chr"&&list.get(listctr).Token.equals("'")){
                                            listctr++;
                                            if(list.get(listctr).Token=="character literal"){
                                                listctr=listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Character Literal. "
); 
                                             flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token.equals("(")){
                                            listctr++;
                                            if(list.get(listctr).Token=="Negative Int Literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Negative Integer Literal. "
); 
                                             flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else{
                                            System.out.print("JJEEKEE");
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");  
                                       flag=1;
                                       listctr++;
                                         break;
                                        }
                                        
                     /////////////////////////////////SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////   
                    // if(flag==0){
                     if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                            listctr++;
                                            
                                            //break;
                                        }
                                    else if(list.get(listctr).Token.equals(",")){
                                    while(list.get(listctr).Token.equals(",")){
                                    listctr++;
                                    if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                   
                                    if(list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                            System.out.print("DITO NA2");
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText(


"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Int Literal. ");
                                          flag=1;
                                break;
                                    }//else
                                    }//if ALL literal
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    
                                        }
                                        else if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                        listctr++;
                                       // flag=1;
                                        //break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                            
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                            //Expecting '=', ',' or ';'.
                                       break; 
                                        }
                                        
                                    }//if
                                    
                                    else{
                                          ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting variable. ");
                                          flag=1;
                                break;
                                    }//else
                                }//while ,
                                 }//else if ,
                                         else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                         }
                                   
                                    }//if LITERAL
                                    else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                        flag=1;
                                    break;
                                    }//else not LITERAL
                                }//if =
                            /////////////////////////////////END OF SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////  
                                 else if(list.get(listctr).Token.equals(",")){
                                    while(list.get(listctr).Token.equals(",")){
                                    listctr++;
                                    
                                       if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    if(list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Integer Literal. ");
                                          flag=1;
                                break;
                                
                                    }//else
                                    }//if ALL literal
                                    else{
                                        
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                        listctr++;
                                      //    System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                      break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                       else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                        }
                                        }//if =
            else if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){//xx
                                        listctr++;
                                         //System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                         // break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                        }
                                        
                                    }//if
                                   
                                    else{
                                          ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting variable. ");
                                          flag=1;
                                break;
                                    }//else
                                }//while ,
                                 }//else if ,
                                else if(list.get(listctr).Token.equals(";")){
                                    listctr++;
                                    System.out.print("LOLOL");
                                  //  break;
                                }
                                         else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");
                                        flag=1;
                                break;
                                }//else not = 
                                
                            }//if identifier
                            else{
                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting identifier. ");   
                             flag=1;
                            break;
                            }//else not identifier
                          }//while VAR DEC
                    if(flag==0){
                    if(list.get(listctr).Token.equals("}")||list.get(listctr).Token.equals(" }")){
                                                listctr++;
                                                flag=1;
                                               }//if }
                    else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '}'.1 ");
                                                        flag=1;
                                                        break;
                                                    }
                     } //IF FLAG==0 FOR SEPARATOR
                 }//if VAR DEC
                                                      else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '}' or Data type. ");
                                                        flag=1;
                                                        break;
                                                    }
                                                   //  flag=0;
                                                   }//if }
                                                    else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '{'. ");
                                                        flag=1;
                                                        break;
                                                    }
                                                     if(flag==0){ if(list.get(listctr).Token.equals("endmission")){
                                                System.out.print("here"); break;
                                               }//if endmission
                                                   else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'endmission'. ");
                                                 flag=1;
                                                        break;
                                                }//else NOT endmission >>startmission
                                                     }//if flag==0 startmission
                                               }//if fallin
                                                          /////////////////////////////////STATEMENTS2//////////////////
                                                    else if(list.get(listctr).Token.equals("execute")){
                                                        iden="";
                                                   iden = iden.concat("<statements2>");
                            listSyntax.add(new Syntax("<statements4> ",iden));
                            
                              iden="";
                                                   iden = iden.concat("<input>");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                              iden="";
                                                   iden = iden.concat("execute");
                            listSyntax.add(new Syntax("<input> ",iden));
                                                
                                                   listctr++;
                                                   
                                                   if(list.get(listctr).Token.equals("identifier")){
                                                         iden="";
                                                   iden = iden.concat("id");
                            listSyntax.add(new Syntax("<input> ",iden));
                                                       listctr++;
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                       if(list.get(listctr).Token.equals(";")){
                                                             iden="";
                                                   iden = iden.concat(";");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                                                       listctr++;
                                                       System.out.print("HMMM");
                                                       flag=1;
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                               }
                                                                else if(list.get(listctr).Token.equals("report")){
                                                                      iden="";
                                                   iden = iden.concat("<statements2");
                            listSyntax.add(new Syntax("<statements4> ",iden));
                              iden="";
                                                   iden = iden.concat("<output>");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                              iden="";
                                                   iden = iden.concat("report");
                            listSyntax.add(new Syntax("<output> ",iden));
                                                   listctr++;
                                                   
                                                   if(list.get(listctr).Token.equals("identifier")){
                                                       
                              iden="";
                                                   iden = iden.concat("<display>");
                            listSyntax.add(new Syntax("<output> ",iden));
                              iden="";
                                                   iden = iden.concat("id");
                            listSyntax.add(new Syntax("<display> ",iden));
                                                       listctr++;
                                                   }
                                                   else if(list.get(listctr+1).Token.equals("string literal")){
                                                       listctr = listctr+2;
                                                       if(list.get(listctr).Token.equals("\"")){
                                                           iden="";
                                                   iden = iden.concat("<display>");
                            listSyntax.add(new Syntax("<output> ",iden));
                              iden="";
                                                   iden = iden.concat("<strlit>");
                                                   
                            listSyntax.add(new Syntax("<display> ",iden));
                             iden="";
                                                   iden = iden.concat("string literal");
                                                   
                            listSyntax.add(new Syntax("<strlit> ",iden));
                            
                                                       listctr++;
                                                       }
                                                       else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '\"'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                       if(list.get(listctr).Token.equals(";")){
                                                            iden="";
                                                   iden = iden.concat("\"");
                                                   
                            listSyntax.add(new Syntax("<statements2> ",iden));
                                                       listctr++;
                                                       flag=1;
                                                       
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                               }
                                              else if(list.get(listctr).Token.equals("endmission")){
                                                  flag=0;
                                                  break;
                                              }
        ///////////////////////////////////////////////END OF STATEMENTS2/////////////////////////////////
               //////////////////////////END OF STATEMENTS IN BODY//////////////////////////////////////////////////////////////////////////////////////////////
                                                             else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'fallin', 'report', 'execute', 'identifier', 'if', 'for', 'do', '++', '--', 'endmission'. ");
                                                 flag=1;      
                                                 break;
                                                }//else NOT statement >>startmission:
                                      }//WHILE COMMAND E
                             System.out.print("Here"+flag+" Here");
                     }//IF COMMAND 
                      else{
                          System.out.print("eeee");
                               ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'fallin', 'report', 'execute', 'identifier', 'if', 'for', 'do', '++', '--', 'endmission'. ");
                                                 flag=1;      
                                                 break;
                                                }//else NOT statement >>startmission:
                                                if(flag==0){
                                                     if(list.get(listctr-1).Token.equals("endmission")){
                                                       //listctr++;
                                                     
                                                   }
                                                         else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'endmission'. "
);
                                                 flag=1;      
                                                 break;
                                                }//else NOT endmission >>startmission:
                                                }
                                       }//if :
                                        else{
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ':'. "
);
                                         flag=1;      
                                         break;
                                                
                                        }//else NOT : >>startmission:
                                      if(flag==0){
                                          //FOLLOW SET NG COMMAND() == DISMISS OR USER DEF
                       if(list.get(listctr).Token.equals("dismiss")||list.get(listctr).Token.equals("int")||list.get(listctr).Token.equals("flt")
                          ||list.get(listctr).Token.equals("onduty")){
                           listctr++;
                       }
                       else{
                           ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int' 'flt' or 'onduty'. hmm");
                                                break;
                       }
                                      }
                                      
                     }//if startmission
                     else{
                       listctr++; //OKAY LANG NA NULL 
                       //FOLLOW SET NG COMMAND() == DISMISS OR USER DEF
                       if(list.get(listctr).Token.equals("dismiss")&&list.get(listctr).Token.equals("int")&&list.get(listctr).Token.equals("flt")
                          &&list.get(listctr).Token.equals("onduty")){
                           listctr++;
                       }
                       
                       else{
                           ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr-1).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int' 'flt' or 'onduty'."); //xxx
                                                break;
                       }
                     }
                                 
                     }//if )
                     else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ')'. "
);
                             break;
                     }
                     }//if (
                     else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '('. "
);
                             break;
                     }
                 }
           else if(list.get(listctr).Token==("dismiss")){
           System.out.print("");
           }
           else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int' 'flt' or 'onduty'. "); //yyyy
                        flag=1;
                             break;
                     }
           } //if fllag==0
              }//if global declaration
             ////////////////////////////////////////END OF GLOBAL DECLARATION////////////////
             //////BODY///////////////////////////////////////////////////////////////////////
            else if(list.get(listctr).Token==("command")){
                     listctr++;
                     System.out.print("command");
                     if(list.get(listctr).Token.equals("(")){
                                        listctr++;
                          if(list.get(listctr).Token.equals(")")){
                                        listctr++;
                                        
                     if(list.get(listctr).Token.equals("startmission")){
                                        listctr++;
                                      if(list.get(listctr).Token.equals(":")){
                                        listctr++;
                                        
                                      
                           if(list.get(listctr).Token==("command")||list.get(listctr).Token==("endmission")||list.get(listctr).Token==("fallin")||list.get(listctr).Token==("Identifier")
                              ||list.get(listctr).Token==("if")||list.get(listctr).Token==("for")||list.get(listctr).Token==("do")||list.get(listctr).Token==("++")||list.get(listctr).Token==("report")
                               ||list.get(listctr).Token==("execute")){
                           while(list.get(listctr).Token!="endmission")
                           {//WHILE LOOP COMMAND INDIE
                                         
                                                if(list.get(listctr).Token.equals("endmission")){
                                                listctr++;
                                                flag=1;
                                               }//if endmission
                                                   ////////////////////////STATEMENTS2 OR STATEMENT IN BODY//////////////////////////////////////////////////////////////////////////////////////
                                               else if(list.get(listctr).Token.equals("fallin")){
                                                listctr++;
                                                    if(list.get(listctr).Token.equals("{")){
                                                    listctr++;
                                                    
                                                     if(list.get(listctr).Token.equals("}")){
                                                    listctr++;
                                                    flag=1;
                                                     }
                                                      ////////////////////////////////VARIABLE DECLARATION///////////////////////////////////////////////////////
                    else if(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                    while(list.get(listctr).Token=="int"||list.get(listctr).Token=="flt"||list.get(listctr).Token=="chr"||list.get(listctr).Token=="bool"||list.get(listctr).Token=="str"||list.get(listctr).Token=="onduty"){
                     listctr++;
                            if(list.get(listctr).Token=="identifier"){
                                listctr++;
                                
                                if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    
                                    if(list.get(listctr).Token=="true"||list.get(listctr).Token=="false"||list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="flt"&&list.get(listctr).Token=="Float Literal"){
                                            listctr++;
                                        }
                                         else if(list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="true"||
                                                 list.get(listctr-3).Token=="bool"&&list.get(listctr).Token=="false"){
                                            listctr++;
                                        }
                                        else if(list.get(listctr-3).Token=="str"&&list.get(listctr).Token.equals("\"")){
                                            listctr++;
                                            if(list.get(listctr).Token=="string literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting String Literal. "
);  
                                       flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else if(list.get(listctr-3).Token=="chr"&&list.get(listctr).Token.equals("'")){
                                            listctr++;
                                            if(list.get(listctr).Token=="character literal"){
                                                listctr=listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Character Literal. "
); 
                                             flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else if(list.get(listctr-3).Token=="int"&&list.get(listctr).Token.equals("(")){
                                            listctr++;
                                            if(list.get(listctr).Token=="Negative Int Literal"){
                                                listctr= listctr+2;
                                            }
                                      
                                            else{
                                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Negative Integer Literal. "
); 
                                             flag=1;
                                       break; 
                                            }//else not negative int lit
                                        }
                                        else{
                                            System.out.print("JJEEKEE");
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");  
                                       flag=1;
                                       listctr++;
                                         break;
                                        }
                                        
                     /////////////////////////////////SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////   
                    // if(flag==0){
                     if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                            listctr++;
                                            
                                            //break;
                                        }
                                    else if(list.get(listctr).Token.equals(",")){
                                    while(list.get(listctr).Token.equals(",")){
                                    listctr++;
                                    if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                   
                                    if(list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                            System.out.print("DITO NA2");
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText(


"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Int Literal. ");
                                          flag=1;
                                break;
                                    }//else
                                    }//if ALL literal
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    
                                        }
                                        else if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                        listctr++;
                                       // flag=1;
                                        //break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                            
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                            //Expecting '=', ',' or ';'.
                                       break; 
                                        }
                                        
                                    }//if
                                    
                                    else{
                                          ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting variable. ");
                                          flag=1;
                                break;
                                    }//else
                                }//while ,
                                 }//else if ,
                                         else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                         }
                                   
                                    }//if LITERAL
                                    else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                        flag=1;
                                    break;
                                    }//else not LITERAL
                                }//if =
                            /////////////////////////////////END OF SEPARATOR LOOP FOR a=number///////////////////////////////////////////////////////////////////  
                                 else if(list.get(listctr).Token.equals(",")){
                                    while(list.get(listctr).Token.equals(",")){
                                    listctr++;
                                    
                                       if(list.get(listctr).Token.equals("identifier")){
                                        listctr++;
                                        if(list.get(listctr).Token.equals("=")){
                                    listctr++;
                                    if(list.get(listctr).Token=="Int Literal"||list.get(listctr).Token=="Float Literal"||list.get(listctr).Token.equals("(")||list.get(listctr).Token.equals("'")||list.get(listctr).Token.equals("\"")){
                                        if(list.get(listctr-4).Token=="Int Literal"&&list.get(listctr).Token=="Int Literal"||list.get(listctr-2).Token=="identifier"&&list.get(listctr).Token=="Int Literal"){
                                            listctr++;
                                        }//if int lit
                                    else{
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Integer Literal. ");
                                          flag=1;
                                break;
                                
                                    }//else
                                    }//if ALL literal
                                    else{
                                        
                                          ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '"+list.get(listctr-3).Token+" literal'. ");
                                          flag=1;
                                break;
                                    }//else
                                    if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){
                                        listctr++;
                                      //    System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                      break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                       else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                        }
                                        }//if =
            else if(list.get(listctr).Token.equals(";")||list.get(listctr).Token.equals(" ;")){//xx
                                        listctr++;
                                         //System.out.print("Hmm4: "+list.get(listctr).Token+" ");
                                         // break;
                                        }
                                        else if(list.get(listctr).Token.equals(",")){
                                        continue;
                                        }
                                        else{
                                            ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");  
                                            flag=1;
                                       break; 
                                        }
                                        
                                    }//if
                                   
                                    else{
                                          ErrorTxt.setText(
"<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting variable. ");
                                          flag=1;
                                break;
                                    }//else
                                }//while ,
                                 }//else if ,
                                else if(list.get(listctr).Token.equals(";")){
                                    listctr++;
                                    System.out.print("LOLOL");
                                  //  break;
                                }
                                         else{
                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '=', ',' or ';'. ");
                                        flag=1;
                                break;
                                }//else not = 
                                
                            }//if identifier
                            else{
                             ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting identifier. ");   
                             flag=1;
                            break;
                            }//else not identifier
                          }//while VAR DEC
                    if(flag==0){
                    if(list.get(listctr).Token.equals("}")||list.get(listctr).Token.equals(" }")){
                                                listctr++;
                                                flag=1;
                                               }//if }
                    else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '}'.1 ");
                                                        flag=1;
                                                        break;
                                                    }
                     } //IF FLAG==0 FOR SEPARATOR
                 }//if VAR DEC
                                                      else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '}' or Data type. ");
                                                        flag=1;
                                                        break;
                                                    }
                                                   //  flag=0;
                                                   }//if }
                                                    else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '{'. ");
                                                        flag=1;
                                                        break;
                                                    }
                                                     if(flag==0){ if(list.get(listctr).Token.equals("endmission")){
                                                System.out.print("here"); break;
                                               }//if endmission
                                                   else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'endmission'. ");
                                                 flag=1;
                                                        break;
                                                }//else NOT endmission >>startmission
                                                     }//if flag==0 startmission
                                               }//if fallin
                                                          /////////////////////////////////STATEMENTS2//////////////////
                                                    else if(list.get(listctr).Token.equals("execute")){
                                                        iden="";
                                                   iden = iden.concat("<statements2>");
                            listSyntax.add(new Syntax("<statements4> ",iden));
                            
                              iden="";
                                                   iden = iden.concat("<input>");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                              iden="";
                                                   iden = iden.concat("execute");
                            listSyntax.add(new Syntax("<input> ",iden));
                                                
                                                   listctr++;
                                                   
                                                   if(list.get(listctr).Token.equals("identifier")){
                                                         iden="";
                                                   iden = iden.concat("id");
                            listSyntax.add(new Syntax("<input> ",iden));
                                                       listctr++;
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                       if(list.get(listctr).Token.equals(";")){
                                                             iden="";
                                                   iden = iden.concat(";");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                                                       listctr++;
                                                       System.out.print("HMMM");
                                                       flag=1;
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                               }
                                                                else if(list.get(listctr).Token.equals("report")){
                                                                      iden="";
                                                   iden = iden.concat("<statements2");
                            listSyntax.add(new Syntax("<statements4> ",iden));
                              iden="";
                                                   iden = iden.concat("<output>");
                            listSyntax.add(new Syntax("<statements2> ",iden));
                              iden="";
                                                   iden = iden.concat("report");
                            listSyntax.add(new Syntax("<output> ",iden));
                                                   listctr++;
                                                   
                                                   if(list.get(listctr).Token.equals("identifier")){
                                                       
                              iden="";
                                                   iden = iden.concat("<display>");
                            listSyntax.add(new Syntax("<output> ",iden));
                              iden="";
                                                   iden = iden.concat("id");
                            listSyntax.add(new Syntax("<display> ",iden));
                                                       listctr++;
                                                   }
                                                   else if(list.get(listctr+1).Token.equals("string literal")){
                                                       listctr = listctr+2;
                                                       if(list.get(listctr).Token.equals("\"")){
                                                           iden="";
                                                   iden = iden.concat("<display>");
                            listSyntax.add(new Syntax("<output> ",iden));
                              iden="";
                                                   iden = iden.concat("<strlit>");
                                                   
                            listSyntax.add(new Syntax("<display> ",iden));
                             iden="";
                                                   iden = iden.concat("string literal");
                                                   
                            listSyntax.add(new Syntax("<strlit> ",iden));
                            
                                                       listctr++;
                                                       }
                                                       else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '\"'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting Identifier. ");
                                                        flag=1;
                                                        break;
                                                   }
                                                       if(list.get(listctr).Token.equals(";")){
                                                            iden="";
                                                   iden = iden.concat("\"");
                                                   
                            listSyntax.add(new Syntax("<statements2> ",iden));
                                                       listctr++;
                                                       flag=1;
                                                       
                                                   }
                                                   else{
                                                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ';'. ");
                                                        flag=1;
                                                        break;
                                                   }
                                               }
        ///////////////////////////////////////////////END OF STATEMENTS2/////////////////////////////////
               //////////////////////////END OF STATEMENTS IN BODY//////////////////////////////////////////////////////////////////////////////////////////////
                                                             else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'fallin', 'report', 'execute', 'identifier', 'if', 'for', 'do', '++', '--', 'endmission'. ");
                                                 //flag=1;      
                                                 break;
                                                }//else NOT statement >>startmission:
                                      }//WHILE COMMAND INDIE
                     }//IF COMMAND INDIE
                                                if(flag==0){
                                                     if(list.get(listctr).Token.equals("endmission")){
                                                       listctr++;
                                                   }
                                                         else{
                                                 ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'endmission'. ");
                                                 flag=1;      
                                                 break;
                                                }//else NOT endmission >>startmission:
                                                }
                             //flag=0;                   
                                       }//if :
                                      
                                        else{
                                         ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ':'. ");
                                         flag=1;      
                                         break;
                                                
                                        }//else NOT : >>startmission:
                                      
                                      if(flag==0){
                                          //FOLLOW SET NG COMMAND() == DISMISS OR USER DEF
                       if(list.get(listctr).Token.equals("dismiss")||list.get(listctr).Token.equals("int")||list.get(listctr).Token.equals("flt")
                          ||list.get(listctr).Token.equals("onduty")){
                           listctr++;
                       }
                       else{
                           ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int', 'flt' or 'onduty'.ppp ");
                                                break;
                       }
                                      }
                                      
                     }//if startmission
                     else{
                       listctr++; //OKAY LANG NA NULL 
                       //FOLLOW SET NG COMMAND() == DISMISS OR USER DEF
                       if(list.get(listctr).Token.equals("dismiss")&&list.get(listctr).Token=="int"&&list.get(listctr).Token=="flt"
                          &&list.get(listctr).Token.equals("onduty")){
                           listctr++;
                           
                       }
                       else{
                           ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr-1).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int', 'flt' or 'onduty'. ");
                                                break;
                       }
                     }
                                 
                     }//if )
                     else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting ')' ");
                             break;
                     }
                     }//if (
                     else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting '('. ");
                             break;
                     }
                 }
           else if(list.get(listctr).Token==("dismiss")){
           System.out.print("");
           }
           else{
                        ErrorTxt.setText("<body style=\"font-family: "+fontfamily+"\"> SYNTAX ERROR on Line <span style=\"color:red\"> "+list.get(listctr).Line+"</span>. Unexpected '<span style=\"color:red\">"+list.get(listctr).Lexeme+""
                             + "</span>'. Expecting 'dismiss', 'int' 'flt' or 'onduty'." );
                             break;
                     }
        
        
        break;
        }//while loop
}//if LexError=0
       return listSyntax; 
        
    }
    //=====================================END OF SYNTAX ANALYZER
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) { 
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Clear;
    private javax.swing.JLabel Clear1;
    private javax.swing.JEditorPane ErrorTxt;
    private javax.swing.JEditorPane ErrorTxt1;
    private javax.swing.JEditorPane ErrorTxt2;
    private javax.swing.JEditorPane ErrorTxt3;
    private javax.swing.JLabel Exit;
    private javax.swing.JLabel Exit1;
    private javax.swing.JLabel Lexical;
    private javax.swing.JTable LexicalTbl;
    public static javax.swing.JTextArea SourceTxt;
    private javax.swing.JLabel Syntax;
    private javax.swing.JTable SyntaxTbl;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTabbedPane jTabbedPane8;
    public static javax.swing.JScrollPane jsp;
    // End of variables declaration//GEN-END:variables
}
